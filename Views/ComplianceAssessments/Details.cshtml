@model CyberRiskApp.Models.ComplianceAssessment
@{
    ViewData["Title"] = $"Assessment: {Model.Title}";
}

<div class="row">
    <div class="col-md-9">
        <!-- Assessment Header -->
        <div class="card mb-4">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h4><i class="fas fa-clipboard-check me-2"></i>@Model.Title</h4>
                    <div>
                        @if (Model.Status == CyberRiskApp.Models.AssessmentStatus.Draft)
                        {
                            <a asp-action="StartAssessment" asp-route-id="@Model.Id" class="btn btn-success btn-sm">
                                <i class="fas fa-play me-1"></i>Start Assessment
                            </a>
                        }
                        @if (Model.Status == CyberRiskApp.Models.AssessmentStatus.InProgress)
                        {
                            <a asp-action="CompleteAssessment" asp-route-id="@Model.Id" class="btn btn-primary btn-sm">
                                <i class="fas fa-check me-1"></i>Complete Assessment
                            </a>
                        }
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-secondary btn-sm">
                            <i class="fas fa-edit me-1"></i>Edit Assessment
                        </a>
                        <a asp-action="BulkView" asp-route-id="@Model.Id" class="btn btn-outline-info btn-sm">
                            <i class="fas fa-th-list me-1"></i>Bulk View
                        </a>
                        <button class="btn btn-info btn-sm" onclick="exportToExcel()">
                            <i class="fas fa-download me-1"></i>Export Report
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">Framework:</dt>
                            <dd class="col-sm-8">@Model.Framework.Name @Model.Framework.Version</dd>
                            <dt class="col-sm-4">Organization:</dt>
                            <dd class="col-sm-8">@Model.Organization.Name</dd>
                            <dt class="col-sm-4">Assessor:</dt>
                            <dd class="col-sm-8">@Model.Assessor</dd>
                            <dt class="col-sm-4">Status:</dt>
                            <dd class="col-sm-8">
                                <span class="badge bg-@(Model.Status switch
                                {
                                    CyberRiskApp.Models.AssessmentStatus.Draft => "secondary",
                                    CyberRiskApp.Models.AssessmentStatus.InProgress => "warning",
                                    CyberRiskApp.Models.AssessmentStatus.Completed => "success",
                                    CyberRiskApp.Models.AssessmentStatus.Approved => "primary",
                                    _ => "secondary"
                                })">
                                    @Model.Status
                                </span>
                            </dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">Start Date:</dt>
                            <dd class="col-sm-8">@Model.StartDate.ToString("MMM dd, yyyy")</dd>
                            <dt class="col-sm-4">Due Date:</dt>
                            <dd class="col-sm-8">
                                @if (Model.DueDate.HasValue)
                                {
                                    @Model.DueDate.Value.ToString("MMM dd, yyyy")
                                }
                                else
                                {
                                    <span class="text-muted">Not set</span>
                                }
                            </dd>
                            <dt class="col-sm-4">Completed:</dt>
                            <dd class="col-sm-8">
                                @if (Model.CompletedDate.HasValue)
                                {
                                    @Model.CompletedDate.Value.ToString("MMM dd, yyyy")
                                }
                                else
                                {
                                    <span class="text-muted">Not completed</span>
                                }
                            </dd>
                            <dt class="col-sm-4">Compliance:</dt>
                            <dd class="col-sm-8">
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar bg-@(Model.CompliancePercentage >= 80 ? "success" : Model.CompliancePercentage >= 60 ? "warning" : "danger")"
                                         role="progressbar"
                                         style="width: @Model.CompliancePercentage%"
                                         aria-valuenow="@Model.CompliancePercentage"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                        @Model.CompliancePercentage.ToString("F1")%
                                    </div>
                                </div>
                            </dd>
                        </dl>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <div class="mt-3">
                        <strong>Description:</strong>
                        <p class="mb-0">@Model.Description</p>
                    </div>
                }
            </div>
        </div>

        <!-- Control Assessments Header -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5><i class="fas fa-tasks me-1"></i>Control Assessments (@Model.ControlAssessments.Count)</h5>
            <div>
                <button class="btn btn-sm btn-primary" onclick="saveAllChanges()">
                    <i class="fas fa-save me-1"></i>Save All Changes
                </button>
                <button class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#bulkUpdateModal">
                    <i class="fas fa-edit me-1"></i>Bulk Update
                </button>
                <button class="btn btn-sm btn-outline-secondary" onclick="toggleExpandAll()">
                    <i class="fas fa-expand-arrows-alt me-1"></i>Expand All
                </button>
            </div>
        </div>

        <!-- Control Assessment Cards -->
        @if (Model.ControlAssessments.Any())
        {
            <div id="controlCardsContainer">
                @foreach (var ca in Model.ControlAssessments.OrderBy(ca => ca.Control.ControlId))
                {
                    <div class="card mb-3 control-assessment-card" data-control-id="@ca.Id">
                        <div class="card-header" style="cursor: pointer;" onclick="toggleCard(@ca.Id)">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <code class="fs-6">@ca.Control.ControlId</code>
                                </div>
                                <div class="col-md-6">
                                    <strong>@ca.Control.Title</strong>
                                    <br><small class="text-muted">@ca.Control.Category</small>
                                </div>
                                <div class="col-md-3">
                                    <span class="badge bg-@(ca.Status switch
                                    {
                                        CyberRiskApp.Models.ComplianceStatus.FullyCompliant => "success",
                                        CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant => "info",
                                        CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant => "warning",
                                        CyberRiskApp.Models.ComplianceStatus.NonCompliant => "danger",
                                        CyberRiskApp.Models.ComplianceStatus.NotApplicable => "secondary",
                                        _ => "secondary"
                                    })">
                                        @(ca.Status switch
                                        {
                                            CyberRiskApp.Models.ComplianceStatus.FullyCompliant => "Fully Compliant",
                                            CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant => "Majorly Compliant",
                                            CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant => "Partially Compliant",
                                            CyberRiskApp.Models.ComplianceStatus.NonCompliant => "Non-Compliant",
                                            CyberRiskApp.Models.ComplianceStatus.NotApplicable => "N/A",
                                            _ => "Unknown"
                                        })
                                    </span>
                                </div>
                                <div class="col-md-1 text-end">
                                    <i class="fas fa-chevron-down card-toggle-icon" id="toggle-icon-@ca.Id"></i>
                                </div>
                            </div>
                        </div>

                        <div class="card-body collapse" id="card-body-@ca.Id">
                            <!-- Control Description -->
                            @if (!string.IsNullOrEmpty(ca.Control.Description))
                            {
                                <div class="alert alert-light mb-3">
                                    <small><strong>Control Description:</strong> @ca.Control.Description</small>
                                </div>
                            }

                            <div class="row">
                                <!-- Left Column -->
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label"><strong>Compliance Status</strong></label>
                                        <select class="form-select compliance-status" data-field="Status" data-id="@ca.Id">
                                            <option value="NonCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.NonCompliant)">Non-Compliant</option>
                                            <option value="PartiallyCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant)">Partially Compliant</option>
                                            <option value="MajorlyCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant)">Majorly Compliant</option>
                                            <option value="FullyCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.FullyCompliant)">Fully Compliant</option>
                                            <option value="NotApplicable" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.NotApplicable)">N/A</option>
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label"><strong>Ownership</strong></label>
                                        <input type="text"
                                               class="form-control assessment-field"
                                               data-field="Ownership"
                                               data-id="@ca.Id"
                                               value="@ca.Ownership"
                                               placeholder="Enter owner/responsible person..." />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label"><strong>Projected Compliance Date</strong></label>
                                        <input type="date"
                                               class="form-control assessment-field"
                                               data-field="ProjectedComplianceDate"
                                               data-id="@ca.Id"
                                               value="@(ca.ProjectedComplianceDate?.ToString("yyyy-MM-dd"))" />
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <div class="form-check">
                                                    <input class="form-check-input assessment-field"
                                                           type="checkbox"
                                                           data-field="ProjectNeeded"
                                                           data-id="@ca.Id"
                                                           checked="@ca.ProjectNeeded" />
                                                    <label class="form-check-label">
                                                        <strong>Project Needed</strong>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label"><strong>T-Shirt Size</strong></label>
                                                <select class="form-select assessment-field" data-field="TShirtSize" data-id="@ca.Id">
                                                    <option value="">-</option>
                                                    <option value="XS" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.XS)">XS</option>
                                                    <option value="S" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.S)">S</option>
                                                    <option value="M" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.M)">M</option>
                                                    <option value="L" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.L)">L</option>
                                                    <option value="XL" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.XL)">XL</option>
                                                    <option value="XXL" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.XXL)">XXL</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label"><strong>Project Number</strong></label>
                                        <input type="text"
                                               class="form-control assessment-field"
                                               data-field="ProjectNumber"
                                               data-id="@ca.Id"
                                               value="@ca.ProjectNumber"
                                               placeholder="Enter project number..." />
                                    </div>
                                </div>

                                <!-- Right Column -->
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label"><strong>Gap Notes</strong></label>
                                        <textarea class="form-control assessment-field"
                                                  data-field="GapNotes"
                                                  data-id="@ca.Id"
                                                  rows="3"
                                                  placeholder="Describe any gaps or issues...">@ca.GapNotes</textarea>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label"><strong>Evidence of Compliance</strong></label>
                                        <textarea class="form-control assessment-field"
                                                  data-field="EvidenceOfCompliance"
                                                  data-id="@ca.Id"
                                                  rows="4"
                                                  placeholder="Document evidence, links, procedures, etc...">@ca.EvidenceOfCompliance</textarea>
                                    </div>

                                    <div class="d-flex justify-content-end gap-2">
                                        <button class="btn btn-sm btn-outline-primary" onclick="saveControlAssessment(@ca.Id)">
                                            <i class="fas fa-save me-1"></i>Save
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="resetControlAssessment(@ca.Id)">
                                            <i class="fas fa-undo me-1"></i>Reset
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Assessment Metadata -->
                            @if (!string.IsNullOrEmpty(ca.AssessedBy) || ca.AssessmentDate.HasValue)
                            {
                                <hr>
                                <div class="row">
                                    <div class="col-md-6">
                                        <small class="text-muted">
                                            <strong>Last Assessed By:</strong> @ca.AssessedBy
                                        </small>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        <small class="text-muted">
                                            <strong>Assessment Date:</strong> @(ca.AssessmentDate?.ToString("MMM dd, yyyy") ?? "Not assessed")
                                        </small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-body text-center">
                    <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                    <h5>No Control Assessments Found</h5>
                    <p class="text-muted">This assessment doesn't have any control assessments yet.</p>
                </div>
            </div>
        }
    </div>

    <!-- Sidebar Statistics -->
    <div class="col-md-3">
        <div class="card">
            <div class="card-header">
                <h6><i class="fas fa-chart-bar me-1"></i>Assessment Statistics</h6>
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-12 mb-3">
                        <h4 class="text-primary">@Model.ControlAssessments.Count</h4>
                        <small class="text-muted">Total Controls</small>
                    </div>
                    <div class="col-12 mb-3">
                        <h4 class="text-success">@Model.CompliancePercentage.ToString("F1")%</h4>
                        <small class="text-muted">Compliance</small>
                    </div>
                </div>
                <hr>
                <div class="row text-center">
                    <div class="col-6 mb-2">
                        <h6 class="text-success">@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.FullyCompliant)</h6>
                        <small class="text-muted">Fully Compliant</small>
                    </div>
                    <div class="col-6 mb-2">
                        <h6 class="text-info">@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant)</h6>
                        <small class="text-muted">Majorly Compliant</small>
                    </div>
                    <div class="col-6 mb-2">
                        <h6 class="text-warning">@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant)</h6>
                        <small class="text-muted">Partially Compliant</small>
                    </div>
                    <div class="col-6 mb-2">
                        <h6 class="text-danger">@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.NonCompliant)</h6>
                        <small class="text-muted">Non-Compliant</small>
                    </div>
                    <div class="col-12">
                        <h6 class="text-secondary">@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.NotApplicable)</h6>
                        <small class="text-muted">Not Applicable</small>
                    </div>
                </div>
                <hr>
                <div class="row text-center">
                    <div class="col-12 mb-2">
                        <h6 class="text-primary">@Model.ControlAssessments.Count(ca => ca.ProjectNeeded)</h6>
                        <small class="text-muted">Projects Needed</small>
                    </div>
                    <div class="col-12">
                        <h6 class="text-info">
                            @if (Model.DueDate.HasValue)
                            {
                                @((Model.DueDate.Value - DateTime.UtcNow).Days)
                            }
                            else
                            {
                                <span>--</span>
                            }
                        </h6>
                        <small class="text-muted">Days Remaining</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Filters -->
        <div class="card mt-3">
            <div class="card-header">
                <h6><i class="fas fa-filter me-1"></i>Quick Filters</h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button class="btn btn-sm btn-outline-secondary" onclick="filterByStatus('all')">Show All</button>
                    <button class="btn btn-sm btn-outline-danger" onclick="filterByStatus('NonCompliant')">Non-Compliant Only</button>
                    <button class="btn btn-sm btn-outline-warning" onclick="filterByStatus('PartiallyCompliant')">Partially Compliant</button>
                    <button class="btn btn-sm btn-outline-success" onclick="filterByStatus('FullyCompliant')">Fully Compliant</button>
                    <button class="btn btn-sm btn-outline-primary" onclick="filterByProjectNeeded()">Projects Needed</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Update Modal -->
<div class="modal fade" id="bulkUpdateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bulk Update Controls</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="bulkUpdateForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Ownership</label>
                                <input type="text" class="form-control" id="bulkOwnership" placeholder="Enter owner name">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Compliance Status</label>
                                <select class="form-select" id="bulkStatus">
                                    <option value="">Don't change</option>
                                    <option value="NonCompliant">Non-Compliant</option>
                                    <option value="PartiallyCompliant">Partially Compliant</option>
                                    <option value="MajorlyCompliant">Majorly Compliant</option>
                                    <option value="FullyCompliant">Fully Compliant</option>
                                    <option value="NotApplicable">N/A</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Projected Compliance Date</label>
                                <input type="date" class="form-control" id="bulkProjectedDate">
                            </div>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="bulkProjectNeeded">
                                    <label class="form-check-label" for="bulkProjectNeeded">
                                        Mark all as "Project Needed"
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyBulkUpdate()">Apply Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Toggle individual card
        function toggleCard(controlId) {
            const cardBody = document.getElementById(`card-body-${controlId}`);
            const icon = document.getElementById(`toggle-icon-${controlId}`);

            if (cardBody.classList.contains('show')) {
                cardBody.classList.remove('show');
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            } else {
                cardBody.classList.add('show');
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            }
        }

        // Toggle all cards
        function toggleExpandAll() {
            const allCardBodies = document.querySelectorAll('[id^="card-body-"]');
            const allIcons = document.querySelectorAll('[id^="toggle-icon-"]');

            const firstCard = allCardBodies[0];
            const shouldExpand = !firstCard.classList.contains('show');

            allCardBodies.forEach(cardBody => {
                if (shouldExpand) {
                    cardBody.classList.add('show');
                } else {
                    cardBody.classList.remove('show');
                }
            });

            allIcons.forEach(icon => {
                if (shouldExpand) {
                    icon.classList.remove('fa-chevron-down');
                    icon.classList.add('fa-chevron-up');
                } else {
                    icon.classList.remove('fa-chevron-up');
                    icon.classList.add('fa-chevron-down');
                }
            });
        }

        // Filter by status
        function filterByStatus(status) {
            const allCards = document.querySelectorAll('.control-assessment-card');

            allCards.forEach(card => {
                if (status === 'all') {
                    card.style.display = 'block';
                } else {
                    const statusSelect = card.querySelector('.compliance-status');
                    if (statusSelect.value === status) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                }
            });
        }

        // Filter by project needed
        function filterByProjectNeeded() {
            const allCards = document.querySelectorAll('.control-assessment-card');

            allCards.forEach(card => {
                const projectCheckbox = card.querySelector('[data-field="ProjectNeeded"]');
                if (projectCheckbox.checked) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Save individual control assessment
        function saveControlAssessment(controlAssessmentId) {
            const data = {};
            const card = document.querySelector(`[data-control-id="${controlAssessmentId}"]`);

            // Collect all field data
            card.querySelectorAll('.assessment-field, .compliance-status').forEach(element => {
                const field = element.getAttribute('data-field');
                let value = element.value;

                if (element.type === 'checkbox') {
                    value = element.checked;
                } else if (element.type === 'date' && value === '') {
                    value = null;
                }

                data[field] = value;
            });

            // Send AJAX request
            fetch(`/ComplianceAssessments/UpdateControlAssessment/${controlAssessmentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showToast('Control assessment updated successfully!', 'success');
                    // Update the badge in the card header
                    updateCardBadge(controlAssessmentId, data.Status);
                    location.reload(); // Refresh to update compliance percentage
                } else {
                    showToast(result.message || 'Error updating control assessment', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating control assessment', 'error');
            });
        }

        // Update card header badge
        function updateCardBadge(controlAssessmentId, status) {
            const card = document.querySelector(`[data-control-id="${controlAssessmentId}"]`);
            const badge = card.querySelector('.badge');

            // Remove existing badge classes
            badge.className = 'badge';

            // Add new class and text based on status
            switch(status) {
                case 'FullyCompliant':
                    badge.classList.add('bg-success');
                    badge.textContent = 'Fully Compliant';
                    break;
                case 'MajorlyCompliant':
                    badge.classList.add('bg-info');
                    badge.textContent = 'Majorly Compliant';
                    break;
                case 'PartiallyCompliant':
                    badge.classList.add('bg-warning');
                    badge.textContent = 'Partially Compliant';
                    break;
                case 'NonCompliant':
                    badge.classList.add('bg-danger');
                    badge.textContent = 'Non-Compliant';
                    break;
                case 'NotApplicable':
                    badge.classList.add('bg-secondary');
                    badge.textContent = 'N/A';
                    break;
            }
        }

        // Reset control assessment
        function resetControlAssessment(controlAssessmentId) {
            if (confirm('Are you sure you want to reset this control assessment to its last saved state?')) {
                location.reload();
            }
        }

        // Save all changes
        function saveAllChanges() {
            const updates = [];
            document.querySelectorAll('.control-assessment-card').forEach(card => {
                const controlAssessmentId = card.getAttribute('data-control-id');
                const data = { id: controlAssessmentId };

                card.querySelectorAll('.assessment-field, .compliance-status').forEach(element => {
                    const field = element.getAttribute('data-field');
                    let value = element.value;

                    if (element.type === 'checkbox') {
                        value = element.checked;
                    } else if (element.type === 'date' && value === '') {
                        value = null;
                    }

                    data[field] = value;
                });

                updates.push(data);
            });

            fetch('/ComplianceAssessments/UpdateAllControlAssessments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(updates)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showToast('All control assessments updated successfully!', 'success');
                    location.reload();
                } else {
                    showToast(result.message || 'Error updating control assessments', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating control assessments', 'error');
            });
        }

        // Apply bulk update
        function applyBulkUpdate() {
            const ownership = document.getElementById('bulkOwnership').value;
            const status = document.getElementById('bulkStatus').value;
            const projectedDate = document.getElementById('bulkProjectedDate').value;
            const projectNeeded = document.getElementById('bulkProjectNeeded').checked;

            if (!ownership && !status && !projectedDate && !projectNeeded) {
                showToast('Please fill in at least one field to update', 'warning');
                return;
            }

            // Apply to all visible cards
            document.querySelectorAll('.control-assessment-card:not([style*="display: none"])').forEach(card => {
                if (ownership) {
                    const ownershipInput = card.querySelector('[data-field="Ownership"]');
                    if (ownershipInput) ownershipInput.value = ownership;
                }
                if (status) {
                    const statusSelect = card.querySelector('[data-field="Status"]');
                    if (statusSelect) statusSelect.value = status;
                }
                if (projectedDate) {
                    const dateInput = card.querySelector('[data-field="ProjectedComplianceDate"]');
                    if (dateInput) dateInput.value = projectedDate;
                }
                if (projectNeeded) {
                    const projectCheckbox = card.querySelector('[data-field="ProjectNeeded"]');
                    if (projectCheckbox) projectCheckbox.checked = true;
                }
            });

            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('bulkUpdateModal')).hide();
            showToast('Bulk update applied. Remember to save changes!', 'info');
        }

        // Export to Excel
        function exportToExcel() {
            window.location.href = `/ComplianceAssessments/ExportToExcel/@Model.Id`;
        }

        // Toast notification helper
        function showToast(message, type) {
            const toastContainer = document.querySelector('.toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 5000);
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '1055';
            document.body.appendChild(container);
            return container;
        }

        // Auto-update card headers when status changes
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('compliance-status')) {
                const controlId = e.target.getAttribute('data-id');
                updateCardBadge(controlId, e.target.value);
            }
        });
    </script>
}

@{
    // Add anti-forgery token for AJAX requests
}
<input name="__RequestVerificationToken" type="hidden" value="@Html.AntiForgeryToken()" />