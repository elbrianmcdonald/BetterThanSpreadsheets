@model CyberRiskApp.Models.StrategyGoal
@{
    ViewData["Title"] = "Create Strategy Goal";
    var plan = ViewBag.Plan as CyberRiskApp.Models.StrategyPlan;
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-plus text-primary me-2"></i>
                    Create Strategy Goal
                </h2>
                <a asp-controller="Strategy" asp-action="Details" asp-route-id="@plan?.Id" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Back to Plan
                </a>
            </div>

            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                Creating goal for strategy plan: <strong>@plan?.PlanName</strong>
            </div>

            <form asp-action="Create" method="post">
                <input type="hidden" asp-for="StrategyPlanId" />
                
                @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ErrorCount > 0)
                {
                    <div class="alert alert-danger">
                        <h6>Please correct the following errors:</h6>
                        <div asp-validation-summary="All"></div>
                    </div>
                }

                <div class="card">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-bullseye me-2"></i>Goal Details
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="FunctionDomain" class="form-label fw-bold">Function/Domain <span class="text-danger">*</span></label>
                                    <input asp-for="FunctionDomain" class="form-control" placeholder="e.g., Identify, Protect, Detect" />
                                    <span asp-validation-for="FunctionDomain" class="text-danger"></span>
                                    <small class="form-text text-muted">For NIST CSF: Function (Identify, Protect, etc.). For C2M2: Domain (ASSET, THREAT, etc.)</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="MaturityFrameworkId" class="form-label fw-bold">Maturity Framework <span class="text-danger">*</span></label>
                                    <select asp-for="MaturityFrameworkId" class="form-control" asp-items="ViewBag.Frameworks">
                                        <option value="">-- Select Framework --</option>
                                    </select>
                                    <span asp-validation-for="MaturityFrameworkId" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="CurrentMaturityLevel" class="form-label fw-bold">Current Maturity Level</label>
                                    <select asp-for="CurrentMaturityLevel" class="form-control" asp-items="Html.GetEnumSelectList<CyberRiskApp.Models.MaturityLevel>()">
                                    </select>
                                    <span asp-validation-for="CurrentMaturityLevel" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="TargetMaturityLevel" class="form-label fw-bold">Target Maturity Level <span class="text-danger">*</span></label>
                                    <select asp-for="TargetMaturityLevel" class="form-control" asp-items="Html.GetEnumSelectList<CyberRiskApp.Models.MaturityLevel>()">
                                    </select>
                                    <span asp-validation-for="TargetMaturityLevel" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="TargetDate" class="form-label fw-bold">Target Date <span class="text-danger">*</span></label>
                                    <input asp-for="TargetDate" type="date" class="form-control" />
                                    <span asp-validation-for="TargetDate" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Priority" class="form-label fw-bold">Priority</label>
                                    <select asp-for="Priority" class="form-control" asp-items="Html.GetEnumSelectList<CyberRiskApp.Models.GoalPriority>()">
                                    </select>
                                    <span asp-validation-for="Priority" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label fw-bold">Notes</label>
                            <textarea asp-for="Notes" class="form-control" rows="4" 
                                     placeholder="Enter any additional notes or requirements for this goal"></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fas fa-save me-2"></i>Create Goal
                            </button>
                            <a asp-controller="Strategy" asp-action="Details" asp-route-id="@plan?.Id" class="btn btn-secondary btn-lg">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum date to today
            const targetDateInput = document.querySelector('input[name="TargetDate"]');
            const today = new Date().toISOString().split('T')[0];
            targetDateInput.min = today;
            
            // Validate target maturity level is higher than current
            const currentLevel = document.querySelector('select[name="CurrentMaturityLevel"]');
            const targetLevel = document.querySelector('select[name="TargetMaturityLevel"]');
            
            function validateMaturityLevels() {
                const current = parseInt(currentLevel.value) || 0;
                const target = parseInt(targetLevel.value) || 0;
                
                if (target <= current) {
                    targetLevel.setCustomValidity('Target maturity level must be higher than current level');
                } else {
                    targetLevel.setCustomValidity('');
                }
            }
            
            currentLevel.addEventListener('change', validateMaturityLevels);
            targetLevel.addEventListener('change', validateMaturityLevels);
        });
    </script>
}