@model CyberRiskApp.Models.RiskMatrix
@{
    ViewData["Title"] = "Configure Risk Matrix";
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>
            <i class="fas fa-cog text-primary me-2"></i>
            Configure Risk Matrix: @Model.Name
        </h2>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i>Back to List
        </a>
    </div>

    <!-- Matrix Info Card -->
    <div class="card mb-4">
        <div class="card-header bg-info bg-opacity-10">
            <h5 class="mb-0">
                <i class="fas fa-info-circle me-2"></i>Matrix Information
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <strong>Size:</strong> @(Model.MatrixSize)×@(Model.MatrixSize)
                </div>
                <div class="col-md-3">
                    <strong>Type:</strong> 
                    @if (Model.MatrixType == CyberRiskApp.Models.RiskMatrixType.ImpactLikelihood)
                    {
                        <span class="text-primary">2D Matrix</span>
                    }
                    else
                    {
                        <span class="text-info">3D Matrix</span>
                    }
                </div>
                <div class="col-md-3">
                    <strong>Status:</strong> 
                    @if (Model.IsActive)
                    {
                        <span class="badge bg-success">Active</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">Inactive</span>
                    }
                </div>
                <div class="col-md-3">
                    @if (Model.IsDefault)
                    {
                        <span class="badge bg-warning">Default Matrix</span>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Level Configuration Section -->
    <div class="card mb-4">
        <div class="card-header bg-primary bg-opacity-10">
            <h5 class="mb-0">
                <i class="fas fa-layer-group me-2"></i>Risk Level Configuration
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <!-- Impact Levels -->
                <div class="col-md-4">
                    <h6 class="text-primary"><i class="fas fa-exclamation-triangle me-2"></i>Impact Levels</h6>
                    <div id="impactLevels">
                        @for (int i = 1; i <= Model.MatrixSize; i++)
                        {
                            <div class="mb-3 level-config" data-level-type="Impact" data-level-value="@i">
                                <label class="form-label fw-bold">Level @i</label>
                                <div class="row">
                                    <div class="col-8">
                                        <input type="text" class="form-control level-name" placeholder="Enter level name" value="Level @i" />
                                    </div>
                                    <div class="col-4">
                                        <input type="color" class="form-control form-control-color level-color" value="#@(GetDefaultColor(i, Model.MatrixSize))" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Likelihood Levels -->
                <div class="col-md-4">
                    <h6 class="text-success"><i class="fas fa-percentage me-2"></i>Likelihood Levels</h6>
                    <div id="likelihoodLevels">
                        @for (int i = 1; i <= Model.MatrixSize; i++)
                        {
                            <div class="mb-3 level-config" data-level-type="Likelihood" data-level-value="@i">
                                <label class="form-label fw-bold">Level @i</label>
                                <div class="row">
                                    <div class="col-8">
                                        <input type="text" class="form-control level-name" placeholder="Enter level name" value="Level @i" />
                                    </div>
                                    <div class="col-4">
                                        <input type="color" class="form-control form-control-color level-color" value="#@(GetDefaultColor(i, Model.MatrixSize))" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Exposure Levels (3D Only) -->
                @if (Model.MatrixType == CyberRiskApp.Models.RiskMatrixType.ImpactLikelihoodExposure)
                {
                    <div class="col-md-4">
                        <h6 class="text-warning"><i class="fas fa-shield-alt me-2"></i>Exposure Levels</h6>
                        <div id="exposureLevels">
                            @for (int i = 1; i <= Model.MatrixSize; i++)
                            {
                                <div class="mb-3 level-config" data-level-type="Exposure" data-level-value="@i">
                                    <label class="form-label fw-bold">Level @i</label>
                                    <div class="row">
                                        <div class="col-8">
                                            <input type="text" class="form-control level-name" placeholder="Enter level name" value="Level @i" />
                                        </div>
                                        <div class="col-4">
                                            <input type="color" class="form-control form-control-color level-color" value="#@(GetDefaultColor(i, Model.MatrixSize))" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="mt-4">
                <button type="button" class="btn btn-primary" id="saveLevels">
                    <i class="fas fa-save me-2"></i>Save Level Configuration
                </button>
                <button type="button" class="btn btn-outline-secondary" id="resetLevels">
                    <i class="fas fa-undo me-2"></i>Reset to Defaults
                </button>
            </div>
        </div>
    </div>

    <!-- Matrix Preview Section -->
    <div class="card mb-4">
        <div class="card-header bg-success bg-opacity-10">
            <h5 class="mb-0">
                <i class="fas fa-eye me-2"></i>Matrix Preview
            </h5>
        </div>
        <div class="card-body">
            <div id="matrixPreview" class="table-responsive">
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading matrix preview...</p>
                </div>
            </div>
            
            <div class="mt-4">
                <button type="button" class="btn btn-success" id="generateMatrix">
                    <i class="fas fa-magic me-2"></i>Generate Risk Matrix
                </button>
                <button type="button" class="btn btn-info" id="previewMatrix">
                    <i class="fas fa-eye me-2"></i>Preview Matrix
                </button>
            </div>
        </div>
    </div>

    <!-- Risk Level Mapping Section -->
    <div class="card">
        <div class="card-header bg-warning bg-opacity-10">
            <h5 class="mb-0">
                <i class="fas fa-sliders-h me-2"></i>Risk Level Mapping
            </h5>
        </div>
        <div class="card-body">
            <p class="text-muted">Configure how risk scores map to risk levels (Low, Medium, High, Critical)</p>
            
            <div class="row">
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label fw-bold text-success">Low Risk</label>
                        <div class="input-group">
                            <span class="input-group-text">≤</span>
                            <input type="number" class="form-control" id="lowThreshold" value="4" min="1" />
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label fw-bold text-warning">Medium Risk</label>
                        <div class="input-group">
                            <span class="input-group-text">≤</span>
                            <input type="number" class="form-control" id="mediumThreshold" value="9" min="2" />
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label fw-bold text-danger">High Risk</label>
                        <div class="input-group">
                            <span class="input-group-text">≤</span>
                            <input type="number" class="form-control" id="highThreshold" value="16" min="3" />
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">Critical Risk</label>
                        <div class="input-group">
                            <span class="input-group-text">></span>
                            <input type="number" class="form-control" id="criticalThreshold" value="16" readonly />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <button type="button" class="btn btn-warning" id="saveThresholds">
                    <i class="fas fa-save me-2"></i>Save Risk Thresholds
                </button>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetDefaultColor(int level, int maxLevel)
    {
        // Generate default colors from green to red based on risk level
        var colors = new string[5] { "28a745", "ffc107", "fd7e14", "dc3545", "6f42c1" };
        var index = Math.Min(level - 1, colors.Length - 1);
        return colors[index];
    }
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const matrixId = @Model.Id;
            const matrixSize = @Model.MatrixSize;
            const matrixType = @((int)Model.MatrixType);
            const is3D = matrixType === 2;

            // Save Level Configuration
            document.getElementById('saveLevels').addEventListener('click', function() {
                const levels = [];
                
                document.querySelectorAll('.level-config').forEach(function(levelDiv) {
                    const levelType = levelDiv.getAttribute('data-level-type');
                    const levelValue = parseInt(levelDiv.getAttribute('data-level-value'));
                    const levelName = levelDiv.querySelector('.level-name').value;
                    const levelColor = levelDiv.querySelector('.level-color').value;
                    
                    levels.push({
                        LevelType: levelType,
                        LevelValue: levelValue,
                        LevelName: levelName,
                        ColorCode: levelColor,
                        Multiplier: levelValue
                    });
                });

                fetch(`/RiskMatrix/SaveLevels/${matrixId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(levels)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert('Level configuration saved successfully!', 'success');
                    } else {
                        showAlert('Error saving configuration: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    showAlert('Error saving configuration: ' + error.message, 'danger');
                });
            });

            // Generate Matrix
            document.getElementById('generateMatrix').addEventListener('click', function() {
                fetch(`/RiskMatrix/GenerateMatrix/${matrixId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert('Risk matrix generated successfully!', 'success');
                        previewMatrix();
                    } else {
                        showAlert('Error generating matrix: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    showAlert('Error generating matrix: ' + error.message, 'danger');
                });
            });

            // Preview Matrix
            document.getElementById('previewMatrix').addEventListener('click', previewMatrix);

            // Save Risk Thresholds
            document.getElementById('saveThresholds').addEventListener('click', function() {
                const thresholds = {
                    lowThreshold: parseInt(document.getElementById('lowThreshold').value),
                    mediumThreshold: parseInt(document.getElementById('mediumThreshold').value),
                    highThreshold: parseInt(document.getElementById('highThreshold').value)
                };

                fetch(`/RiskMatrix/SaveThresholds/${matrixId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(thresholds)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert('Risk thresholds saved successfully!', 'success');
                    } else {
                        showAlert('Error saving thresholds: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    showAlert('Error saving thresholds: ' + error.message, 'danger');
                });
            });

            // Reset Levels
            document.getElementById('resetLevels').addEventListener('click', function() {
                if (confirm('Are you sure you want to reset all levels to default values?')) {
                    location.reload();
                }
            });

            // Preview Matrix Function
            function previewMatrix() {
                console.log('Starting matrix preview...');
                fetch(`/RiskMatrix/GetMatrixData/${matrixId}`)
                .then(response => {
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Matrix data received:', data);
                    if (data.success) {
                        renderMatrixPreview(data.matrix, data.levels, data.cells);
                    } else {
                        console.error('API returned error:', data.message);
                        document.getElementById('matrixPreview').innerHTML = `<div class="alert alert-warning">Error loading matrix data: ${data.message}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading matrix data:', error);
                    document.getElementById('matrixPreview').innerHTML = `<div class="alert alert-danger">Error loading matrix data: ${error.message}</div>`;
                });
            }

            // Render Matrix Preview
            function renderMatrixPreview(matrix, levels, cells) {
                console.log('Rendering matrix preview:', { matrix, levels, cells });
                const previewDiv = document.getElementById('matrixPreview');
                
                if (!levels || levels.length === 0) {
                    renderDefaultPreview(matrix);
                    return;
                }

                if (!cells || cells.length === 0) {
                    previewDiv.innerHTML = '<div class="alert alert-info">No matrix cells generated yet. Click "Generate Risk Matrix" to create the matrix cells.</div>';
                    return;
                }
                
                const likelihoodLevels = levels.filter(l => l.levelType === 'Likelihood').sort((a, b) => a.levelValue - b.levelValue);
                const impactLevels = levels.filter(l => l.levelType === 'Impact').sort((a, b) => b.levelValue - a.levelValue);
                
                console.log('Likelihood levels:', likelihoodLevels);
                console.log('Impact levels:', impactLevels);
                
                if (likelihoodLevels.length === 0) {
                    previewDiv.innerHTML = '<div class="alert alert-warning">No likelihood levels found. Please configure levels first.</div>';
                    return;
                }
                
                if (impactLevels.length === 0) {
                    previewDiv.innerHTML = '<div class="alert alert-warning">No impact levels found. Please configure levels first.</div>';
                    return;
                }
                
                // Create heatmap-style visualization
                let html = `
                    <div class="risk-heatmap-container">
                        <div class="heatmap-grid">
                            <!-- Y-axis labels (Impact) -->
                            <div class="y-axis-label">
                                <div class="axis-title">Impact</div>
                                <div class="impact-labels">`;
                
                impactLevels.forEach(level => {
                    html += `<div class="impact-label">${level.levelName}</div>`;
                });
                
                html += `
                                </div>
                            </div>
                            
                            <!-- Heatmap cells -->
                            <div class="heatmap-cells">`;
                
                impactLevels.forEach(impactLevel => {
                    html += '<div class="heatmap-row">';
                    
                    likelihoodLevels.forEach(likelihoodLevel => {
                        const cell = cells.find(c => 
                            c.impactLevel === impactLevel.levelValue && 
                            c.likelihoodLevel === likelihoodLevel.levelValue && 
                            (!is3D || c.exposureLevel === 1)
                        );
                        
                        if (cell) {
                            const riskLevel = getRiskLevelFromScore(cell.riskScore);
                            const cellClass = getHeatmapCellClass(riskLevel);
                            html += `
                                <div class="heatmap-cell ${cellClass}" 
                                     title="${impactLevel.levelName} Impact × ${likelihoodLevel.levelName} Likelihood = ${riskLevel} Risk (Score: ${cell.riskScore})"
                                     data-impact="${impactLevel.levelValue}" 
                                     data-likelihood="${likelihoodLevel.levelValue}"
                                     data-score="${cell.riskScore}">
                                    <div class="cell-content">
                                        <div class="risk-count">${cell.riskScore}</div>
                                        <div class="risk-level-text">${riskLevel}</div>
                                    </div>
                                </div>`;
                        } else {
                            html += `
                                <div class="heatmap-cell cell-none" 
                                     title="${impactLevel.levelName} Impact × ${likelihoodLevel.levelName} Likelihood = No Data">
                                    <div class="cell-content">
                                        <div class="risk-count">-</div>
                                        <div class="risk-level-text">No Data</div>
                                    </div>
                                </div>`;
                        }
                    });
                    html += '</div>';
                });
                
                html += `
                            </div>
                        </div>
                        
                        <!-- X-axis labels (Likelihood) -->
                        <div class="x-axis-labels">`;
                
                likelihoodLevels.forEach(level => {
                    html += `<div class="likelihood-label">${level.levelName}</div>`;
                });
                
                html += `
                        </div>
                        <div class="x-axis-title">Likelihood</div>
                    </div>
                    
                    <!-- Legend -->
                    <div class="heatmap-legend mt-3">
                        <strong>Risk Level Legend:</strong>
                        <span class="legend-item">
                            <span class="legend-color bg-success"></span> Low
                        </span>
                        <span class="legend-item">
                            <span class="legend-color bg-info"></span> Medium
                        </span>
                        <span class="legend-item">
                            <span class="legend-color bg-warning"></span> High
                        </span>
                        <span class="legend-item">
                            <span class="legend-color bg-danger"></span> Critical
                        </span>
                    </div>`;
                
                if (is3D) {
                    html += '<p class="text-muted mt-2"><small><i class="fas fa-info-circle me-1"></i>This preview shows the base 2D matrix. The 3D matrix includes exposure levels as multipliers.</small></p>';
                }
                
                previewDiv.innerHTML = html;
            }

            // Helper Functions
            function getRiskLevelFromScore(score) {
                const low = parseInt(document.getElementById('lowThreshold').value);
                const medium = parseInt(document.getElementById('mediumThreshold').value);
                const high = parseInt(document.getElementById('highThreshold').value);
                
                if (score <= low) return 'Low';
                if (score <= medium) return 'Medium';
                if (score <= high) return 'High';
                return 'Critical';
            }

            function getRiskLevelColor(level) {
                switch (level) {
                    case 'Low': return '#28a745';
                    case 'Medium': return '#ffc107';
                    case 'High': return '#fd7e14';
                    case 'Critical': return '#dc3545';
                    default: return '#6c757d';
                }
            }

            function getHeatmapCellClass(riskLevel) {
                switch (riskLevel) {
                    case 'Critical': return 'cell-critical';
                    case 'High': return 'cell-high';
                    case 'Medium': return 'cell-medium';
                    case 'Low': return 'cell-low';
                    default: return 'cell-none';
                }
            }

            function renderDefaultPreview(matrix) {
                const previewDiv = document.getElementById('matrixPreview');
                const size = matrix.matrixSize || 5;
                
                // Create default level names
                const defaultImpactLevels = [];
                const defaultLikelihoodLevels = [];
                
                for (let i = size; i >= 1; i--) {
                    defaultImpactLevels.push({
                        levelValue: i,
                        levelName: `Impact ${i}`
                    });
                }
                
                for (let i = 1; i <= size; i++) {
                    defaultLikelihoodLevels.push({
                        levelValue: i,
                        levelName: `Likelihood ${i}`
                    });
                }
                
                // Generate default cells
                const defaultCells = [];
                for (let impact = 1; impact <= size; impact++) {
                    for (let likelihood = 1; likelihood <= size; likelihood++) {
                        const riskScore = impact * likelihood;
                        const riskLevel = getRiskLevelFromScore(riskScore);
                        defaultCells.push({
                            impactLevel: impact,
                            likelihoodLevel: likelihood,
                            riskScore: riskScore,
                            riskLevel: riskLevel
                        });
                    }
                }
                
                // Create heatmap-style visualization
                let html = `
                    <div class="alert alert-info mb-3">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Preview Mode:</strong> This shows a default ${size}×${size} matrix. Configure levels and generate the matrix for customized preview.
                    </div>
                    <div class="risk-heatmap-container">
                        <div class="heatmap-grid">
                            <!-- Y-axis labels (Impact) -->
                            <div class="y-axis-label">
                                <div class="axis-title">Impact</div>
                                <div class="impact-labels">`;
                
                defaultImpactLevels.forEach(level => {
                    html += `<div class="impact-label">${level.levelName}</div>`;
                });
                
                html += `
                                </div>
                            </div>
                            
                            <!-- Heatmap cells -->
                            <div class="heatmap-cells">`;
                
                defaultImpactLevels.forEach(impactLevel => {
                    html += '<div class="heatmap-row">';
                    
                    defaultLikelihoodLevels.forEach(likelihoodLevel => {
                        const cell = defaultCells.find(c => 
                            c.impactLevel === impactLevel.levelValue && 
                            c.likelihoodLevel === likelihoodLevel.levelValue
                        );
                        
                        if (cell) {
                            const cellClass = getHeatmapCellClass(cell.riskLevel);
                            html += `
                                <div class="heatmap-cell ${cellClass}" 
                                     title="${impactLevel.levelName} × ${likelihoodLevel.levelName} = ${cell.riskLevel} Risk (Score: ${cell.riskScore})"
                                     data-impact="${impactLevel.levelValue}" 
                                     data-likelihood="${likelihoodLevel.levelValue}"
                                     data-score="${cell.riskScore}">
                                    <div class="cell-content">
                                        <div class="risk-count">${cell.riskScore}</div>
                                        <div class="risk-level-text">${cell.riskLevel}</div>
                                    </div>
                                </div>`;
                        }
                    });
                    html += '</div>';
                });
                
                html += `
                            </div>
                        </div>
                        
                        <!-- X-axis labels (Likelihood) -->
                        <div class="x-axis-labels">`;
                
                defaultLikelihoodLevels.forEach(level => {
                    html += `<div class="likelihood-label">${level.levelName}</div>`;
                });
                
                html += `
                        </div>
                        <div class="x-axis-title">Likelihood</div>
                    </div>
                    
                    <!-- Legend -->
                    <div class="heatmap-legend mt-3">
                        <strong>Risk Level Legend:</strong>
                        <span class="legend-item">
                            <span class="legend-color bg-success"></span> Low
                        </span>
                        <span class="legend-item">
                            <span class="legend-color bg-info"></span> Medium
                        </span>
                        <span class="legend-item">
                            <span class="legend-color bg-warning"></span> High
                        </span>
                        <span class="legend-item">
                            <span class="legend-color bg-danger"></span> Critical
                        </span>
                    </div>`;
                
                previewDiv.innerHTML = html;
            }

            function showAlert(message, type) {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
                alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
                alertDiv.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.body.appendChild(alertDiv);
                
                setTimeout(() => {
                    alertDiv.remove();
                }, 5000);
            }

            // Auto-update critical threshold
            document.getElementById('highThreshold').addEventListener('change', function() {
                document.getElementById('criticalThreshold').value = this.value;
            });

            // Initial matrix preview
            previewMatrix();
        });
    </script>

    <style>
        .level-config {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            background-color: #f8f9fa;
        }
        
        .form-control-color {
            width: 100%;
            height: 38px;
        }

        /* Risk Heatmap Styles */
        .risk-heatmap-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .heatmap-grid {
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }

        .y-axis-label {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-right: 10px;
        }

        .axis-title {
            writing-mode: vertical-lr;
            text-orientation: mixed;
            font-weight: bold;
            font-size: 0.9rem;
            color: #495057;
            margin-bottom: 20px;
        }

        .impact-labels {
            display: flex;
            flex-direction: column-reverse;
            gap: 8px;
            margin-top: 10px;
        }

        .impact-label {
            height: 70px;
            display: flex;
            align-items: center;
            font-size: 0.8rem;
            font-weight: 500;
            color: #495057;
            writing-mode: horizontal-tb;
            min-width: 60px;
            text-align: right;
            padding-right: 5px;
        }

        .heatmap-cells {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .heatmap-row {
            display: flex;
            gap: 2px;
        }

        .heatmap-cell {
            width: 100px;
            height: 70px;
            border: 2px solid #fff;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .heatmap-cell:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 10;
        }

        .cell-content {
            text-align: center;
            color: white;
            font-weight: bold;
        }

        .risk-count {
            font-size: 1.5rem;
            line-height: 1;
            margin-bottom: 2px;
        }

        .risk-level-text {
            font-size: 0.7rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            opacity: 0.9;
        }

        /* Risk level color coding */
        .cell-critical {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .cell-high {
            background: linear-gradient(135deg, #ffc107, #e0a800);
            color: #212529 !important;
        }

        .cell-high .cell-content {
            color: #212529 !important;
        }

        .cell-medium {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }

        .cell-low {
            background: linear-gradient(135deg, #28a745, #1e7e34);
        }

        .cell-none {
            background: linear-gradient(135deg, #6c757d, #545b62);
        }

        .x-axis-labels {
            display: flex;
            gap: 2px;
            margin-top: 10px;
            margin-left: 80px;
        }

        .likelihood-label {
            width: 100px;
            text-align: center;
            font-size: 0.8rem;
            font-weight: 500;
            color: #495057;
            padding: 5px;
        }

        .x-axis-title {
            text-align: center;
            font-weight: bold;
            font-size: 0.9rem;
            color: #495057;
            margin-top: 10px;
            margin-left: 80px;
        }

        /* Legend */
        .heatmap-legend {
            display: flex;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
            padding: 15px;
            background: white;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.85rem;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 3px;
            border: 1px solid rgba(0,0,0,0.1);
        }

        /* Responsive design */
        @@media (max-width: 768px) {
            .risk-heatmap-container {
                padding: 10px;
            }
            
            .heatmap-cell {
                width: 60px;
                height: 45px;
            }
            
            .risk-count {
                font-size: 1.1rem;
            }
            
            .risk-level-text {
                font-size: 0.6rem;
            }
            
            .impact-label, .likelihood-label {
                font-size: 0.7rem;
            }
            
            .x-axis-labels, .x-axis-title {
                margin-left: 50px;
            }
            
            .likelihood-label {
                width: 60px;
            }
        }
    </style>
}