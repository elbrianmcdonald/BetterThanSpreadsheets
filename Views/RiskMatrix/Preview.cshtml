@model CyberRiskApp.Models.RiskMatrix
@{
    ViewData["Title"] = "Risk Matrix Preview";
    var levels = ViewBag.Levels as IEnumerable<CyberRiskApp.Models.RiskMatrixLevel>;
    var cells = ViewBag.Cells as IEnumerable<CyberRiskApp.Models.RiskMatrixCell>;
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>
            <i class="fas fa-eye text-primary me-2"></i>
            Preview: @Model.Name
        </h2>
        <div>
            <a asp-action="Configure" asp-route-id="@Model.Id" class="btn btn-primary">
                <i class="fas fa-cog me-1"></i>Configure Matrix
            </a>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i>Back to List
            </a>
        </div>
    </div>

    <!-- Matrix Info Card -->
    <div class="card mb-4">
        <div class="card-header bg-info bg-opacity-10">
            <h5 class="mb-0">
                <i class="fas fa-info-circle me-2"></i>Matrix Information
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-2">
                    <strong>Size:</strong> @(Model.MatrixSize)×@(Model.MatrixSize)
                </div>
                <div class="col-md-2">
                    <strong>Type:</strong> 
                    @if (Model.MatrixType == CyberRiskApp.Models.RiskMatrixType.ImpactLikelihood)
                    {
                        <span class="text-primary">2D Matrix</span>
                    }
                    else
                    {
                        <span class="text-info">3D Matrix</span>
                    }
                </div>
                <div class="col-md-2">
                    <strong>Status:</strong> 
                    @if (Model.IsActive)
                    {
                        <span class="badge bg-success">Active</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">Inactive</span>
                    }
                </div>
                <div class="col-md-2">
                    @if (Model.IsDefault)
                    {
                        <span class="badge bg-warning">Default Matrix</span>
                    }
                </div>
                <div class="col-md-4">
                    <strong>Created:</strong> @Model.CreatedAt.ToString("MMM dd, yyyy") by @Model.CreatedBy
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="mt-3">
                    <strong>Description:</strong> @Model.Description
                </div>
            }
        </div>
    </div>

    @if (levels?.Any() == true)
    {
        <!-- Risk Levels Legend -->
        <div class="card mb-4">
            <div class="card-header bg-primary bg-opacity-10">
                <h5 class="mb-0">
                    <i class="fas fa-layer-group me-2"></i>Risk Level Definitions
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Impact Levels -->
                    <div class="col-md-4">
                        <h6 class="text-primary"><i class="fas fa-exclamation-triangle me-2"></i>Impact Levels</h6>
                        @foreach (var level in levels.Where(l => l.LevelType == RiskMatrixLevelType.Impact).OrderBy(l => l.LevelValue))
                        {
                            <div class="d-flex align-items-center mb-2">
                                <div class="legend-color me-2" style="background-color: @level.ColorCode; width: 20px; height: 20px; border-radius: 3px;"></div>
                                <strong>@level.LevelValue:</strong>
                                <span class="ms-2">@level.LevelName</span>
                            </div>
                        }
                    </div>

                    <!-- Likelihood Levels -->
                    <div class="col-md-4">
                        <h6 class="text-success"><i class="fas fa-percentage me-2"></i>Likelihood Levels</h6>
                        @foreach (var level in levels.Where(l => l.LevelType == RiskMatrixLevelType.Likelihood).OrderBy(l => l.LevelValue))
                        {
                            <div class="d-flex align-items-center mb-2">
                                <div class="legend-color me-2" style="background-color: @level.ColorCode; width: 20px; height: 20px; border-radius: 3px;"></div>
                                <strong>@level.LevelValue:</strong>
                                <span class="ms-2">@level.LevelName</span>
                            </div>
                        }
                    </div>

                    <!-- Exposure Levels (3D Only) -->
                    @if (Model.MatrixType == CyberRiskApp.Models.RiskMatrixType.ImpactLikelihoodExposure)
                    {
                        <div class="col-md-4">
                            <h6 class="text-warning"><i class="fas fa-shield-alt me-2"></i>Exposure Levels</h6>
                            @foreach (var level in levels.Where(l => l.LevelType == RiskMatrixLevelType.Exposure).OrderBy(l => l.LevelValue))
                            {
                                <div class="d-flex align-items-center mb-2">
                                    <div class="legend-color me-2" style="background-color: @level.ColorCode; width: 20px; height: 20px; border-radius: 3px;"></div>
                                    <strong>@level.LevelValue:</strong>
                                    <span class="ms-2">@level.LevelName</span>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (cells?.Any() == true)
    {
        <!-- Risk Matrix -->
        <div class="card mb-4">
            <div class="card-header bg-success bg-opacity-10">
                <h5 class="mb-0">
                    <i class="fas fa-fire me-2"></i>Risk Matrix Heatmap
                </h5>
            </div>
            <div class="card-body">
                @{
                    var likelihoodLevels = levels?.Where(l => l.LevelType == RiskMatrixLevelType.Likelihood).OrderBy(l => l.LevelValue) ?? Enumerable.Empty<CyberRiskApp.Models.RiskMatrixLevel>();
                    var impactLevels = levels?.Where(l => l.LevelType == RiskMatrixLevelType.Impact).OrderByDescending(l => l.LevelValue) ?? Enumerable.Empty<CyberRiskApp.Models.RiskMatrixLevel>();
                }
                
                <div class="risk-heatmap-container">
                    <div class="heatmap-grid">
                        <!-- Y-axis labels (Impact) -->
                        <div class="y-axis-label">
                            <div class="axis-title">Impact</div>
                            <div class="impact-labels">
                                @foreach (var level in impactLevels)
                                {
                                    <div class="impact-label">@level.LevelName</div>
                                }
                            </div>
                        </div>

                        <!-- Heatmap cells -->
                        <div class="heatmap-cells">
                            @foreach (var impactLevel in impactLevels)
                            {
                                <div class="heatmap-row">
                                    @foreach (var likelihoodLevel in likelihoodLevels)
                                    {
                                        var cell = cells.FirstOrDefault(c => 
                                            c.ImpactLevel == impactLevel.LevelValue && 
                                            c.LikelihoodLevel == likelihoodLevel.LevelValue && 
                                            (Model.MatrixType == CyberRiskApp.Models.RiskMatrixType.ImpactLikelihood || c.ExposureLevel == 1)
                                        );
                                        
                                        @if (cell != null)
                                        {
                                            <div class="heatmap-cell @GetHeatmapCellClass(cell.ResultingRiskLevel.ToString())" 
                                                 title="@impactLevel.LevelName Impact × @likelihoodLevel.LevelName Likelihood = @cell.ResultingRiskLevel Risk (Score: @cell.RiskScore)"
                                                 data-impact="@impactLevel.LevelValue" 
                                                 data-likelihood="@likelihoodLevel.LevelValue"
                                                 data-score="@cell.RiskScore">
                                                <div class="cell-content">
                                                    <div class="risk-count">@cell.RiskScore</div>
                                                    <div class="risk-level-text">@cell.ResultingRiskLevel</div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="heatmap-cell cell-none" 
                                                 title="@impactLevel.LevelName Impact × @likelihoodLevel.LevelName Likelihood = No Data">
                                                <div class="cell-content">
                                                    <div class="risk-count">-</div>
                                                    <div class="risk-level-text">No Data</div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <!-- X-axis labels (Likelihood) -->
                    <div class="x-axis-labels">
                        @foreach (var level in likelihoodLevels)
                        {
                            <div class="likelihood-label">@level.LevelName</div>
                        }
                    </div>
                    <div class="x-axis-title">Likelihood</div>
                </div>

                <!-- Legend -->
                <div class="heatmap-legend mt-3">
                    <strong>Risk Level Legend:</strong>
                    <span class="legend-item">
                        <span class="legend-color bg-success"></span> Low
                    </span>
                    <span class="legend-item">
                        <span class="legend-color bg-info"></span> Medium
                    </span>
                    <span class="legend-item">
                        <span class="legend-color bg-warning"></span> High
                    </span>
                    <span class="legend-item">
                        <span class="legend-color bg-danger"></span> Critical
                    </span>
                </div>
                
                @if (Model.MatrixType == CyberRiskApp.Models.RiskMatrixType.ImpactLikelihoodExposure)
                {
                    <div class="alert alert-info mt-3">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>3D Matrix Note:</strong> This preview shows the base matrix with exposure level 1. 
                        In actual assessments, the exposure level will act as a multiplier to the base risk score.
                    </div>
                }
            </div>
        </div>

        <!-- Risk Level Summary -->
        <div class="card">
            <div class="card-header bg-warning bg-opacity-10">
                <h5 class="mb-0">
                    <i class="fas fa-chart-bar me-2"></i>Risk Level Distribution
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    @{
                        var riskCounts = cells.GroupBy(c => c.ResultingRiskLevel.ToString())
                            .ToDictionary(g => g.Key, g => g.Count());
                        var totalCells = cells.Count();
                    }
                    
                    @foreach (var riskLevel in new[] { "Low", "Medium", "High", "Critical" })
                    {
                        var count = riskCounts.ContainsKey(riskLevel) ? riskCounts[riskLevel] : 0;
                        var percentage = totalCells > 0 ? (count * 100.0 / totalCells) : 0;
                        
                        <div class="col-md-3">
                            <div class="card text-center" style="border-color: @GetRiskLevelColor(riskLevel);">
                                <div class="card-body py-2">
                                    <div class="risk-level-badge" style="background-color: @GetRiskLevelColor(riskLevel); color: white; padding: 0.25rem 0.5rem; border-radius: 0.375rem; font-weight: bold;">
                                        @riskLevel Risk
                                    </div>
                                    <div class="mt-2">
                                        <h4 class="mb-0">@count</h4>
                                        <small class="text-muted">@percentage.ToString("F1")% of cells</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- No Matrix Data -->
        <div class="card">
            <div class="card-body text-center py-5">
                <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                <h4 class="text-muted">Matrix Not Generated</h4>
                <p class="text-muted">This risk matrix hasn't been configured with levels and cells yet.</p>
                <a asp-action="Configure" asp-route-id="@Model.Id" class="btn btn-primary">
                    <i class="fas fa-cog me-1"></i>Configure Matrix
                </a>
            </div>
        </div>
    }
</div>

@functions {
    private string GetRiskLevelColor(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "low" => "#28a745",
            "medium" => "#ffc107",
            "high" => "#fd7e14",
            "critical" => "#dc3545",
            _ => "#6c757d"
        };
    }

    private string GetHeatmapCellClass(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "critical" => "cell-critical",
            "high" => "cell-high",
            "medium" => "cell-medium",
            "low" => "cell-low",
            _ => "cell-none"
        };
    }
}

@section Styles {
    <style>
        /* Risk Heatmap Styles */
        .risk-heatmap-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .heatmap-grid {
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }

        .y-axis-label {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-right: 10px;
        }

        .axis-title {
            writing-mode: vertical-lr;
            text-orientation: mixed;
            font-weight: bold;
            font-size: 0.9rem;
            color: #495057;
            margin-bottom: 20px;
        }

        .impact-labels {
            display: flex;
            flex-direction: column-reverse;
            gap: 8px;
            margin-top: 10px;
        }

        .impact-label {
            height: 70px;
            display: flex;
            align-items: center;
            font-size: 0.8rem;
            font-weight: 500;
            color: #495057;
            writing-mode: horizontal-tb;
            min-width: 60px;
            text-align: right;
            padding-right: 5px;
        }

        .heatmap-cells {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .heatmap-row {
            display: flex;
            gap: 2px;
        }

        .heatmap-cell {
            width: 100px;
            height: 70px;
            border: 2px solid #fff;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .heatmap-cell:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 10;
        }

        .cell-content {
            text-align: center;
            color: white;
            font-weight: bold;
        }

        .risk-count {
            font-size: 1.5rem;
            line-height: 1;
            margin-bottom: 2px;
        }

        .risk-level-text {
            font-size: 0.7rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            opacity: 0.9;
        }

        /* Risk level color coding */
        .cell-critical {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .cell-high {
            background: linear-gradient(135deg, #ffc107, #e0a800);
            color: #212529 !important;
        }

        .cell-high .cell-content {
            color: #212529 !important;
        }

        .cell-medium {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }

        .cell-low {
            background: linear-gradient(135deg, #28a745, #1e7e34);
        }

        .cell-none {
            background: linear-gradient(135deg, #6c757d, #545b62);
        }

        .x-axis-labels {
            display: flex;
            gap: 2px;
            margin-top: 10px;
            margin-left: 80px;
        }

        .likelihood-label {
            width: 100px;
            text-align: center;
            font-size: 0.8rem;
            font-weight: 500;
            color: #495057;
            padding: 5px;
        }

        .x-axis-title {
            text-align: center;
            font-weight: bold;
            font-size: 0.9rem;
            color: #495057;
            margin-top: 10px;
            margin-left: 80px;
        }

        /* Legend */
        .heatmap-legend {
            display: flex;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
            padding: 15px;
            background: white;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.85rem;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 3px;
            border: 1px solid rgba(0,0,0,0.1);
        }

        .risk-level-badge {
            display: inline-block;
        }

        /* Responsive design */
        @@media (max-width: 768px) {
            .risk-heatmap-container {
                padding: 10px;
            }
            
            .heatmap-cell {
                width: 60px;
                height: 45px;
            }
            
            .risk-count {
                font-size: 1.1rem;
            }
            
            .risk-level-text {
                font-size: 0.6rem;
            }
            
            .impact-label, .likelihood-label {
                font-size: 0.7rem;
            }
            
            .x-axis-labels, .x-axis-title {
                margin-left: 50px;
            }
            
            .likelihood-label {
                width: 60px;
            }
        }
    </style>
}