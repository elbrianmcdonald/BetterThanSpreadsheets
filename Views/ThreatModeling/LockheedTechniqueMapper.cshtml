@model IEnumerable<CyberRiskApp.Models.KillChainActivity>

@{
    ViewData["Title"] = "Lockheed Kill Chain Technique Mapper";
    var threatModel = ViewBag.ThreatModel as CyberRiskApp.Models.ThreatModel;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a asp-action="Index">Threat Modeling</a></li>
                            <li class="breadcrumb-item"><a asp-action="Details" asp-route-id="@threatModel.Id">@threatModel.Name</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Lockheed Technique Mapper</li>
                        </ol>
                    </nav>
                    <h2 class="text-primary mb-0">
                        <i class="fas fa-sitemap me-2"></i>Lockheed Kill Chain Technique Mapper
                    </h2>
                    <p class="text-muted">Create and manage custom Lockheed Kill Chain techniques</p>
                </div>
                <div>
                    <button type="button" class="btn btn-success me-2" data-bs-toggle="modal" data-bs-target="#createTechniqueModal">
                        <i class="fas fa-plus me-2"></i>Create Technique
                    </button>
                    <a asp-action="Details" asp-route-id="@threatModel.Id" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Threat Model
                    </a>
                </div>
            </div>

            <!-- Kill Chain Phases Grid -->
            <div class="row">
                @{
                    var phases = Enum.GetValues(typeof(CyberRiskApp.Models.CyberKillChainPhase)).Cast<CyberRiskApp.Models.CyberKillChainPhase>();
                }
                
                @foreach (var phase in phases)
                {
                    var phaseTechniques = Model.Where(t => t.Phase == phase).ToList();
                    
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-@GetPhaseColor(phase) text-white">
                                <h6 class="mb-0">
                                    <i class="fas @GetPhaseIcon(phase) me-2"></i>@phase.ToString().Replace("_", " ")
                                </h6>
                                <small>@phaseTechniques.Count techniques</small>
                            </div>
                            <div class="card-body p-2">
                                @if (phaseTechniques.Any())
                                {
                                    @foreach (var technique in phaseTechniques)
                                    {
                                        <div class="technique-card mb-2 p-2 border rounded" data-technique-id="@technique.Id">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <h6 class="mb-1 text-truncate">@technique.Name</h6>
                                                    <p class="mb-1 small text-muted">@technique.Description</p>
                                                    @if (!string.IsNullOrEmpty(technique.EnvironmentType))
                                                    {
                                                        <span class="badge bg-info small">@technique.EnvironmentType</span>
                                                    }
                                                    <span class="badge bg-secondary small">@technique.Complexity</span>
                                                </div>
                                                <div class="btn-group btn-group-sm">
                                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="editTechnique(@technique.Id)" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteTechnique(@technique.Id)" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center text-muted py-3">
                                        <i class="fas fa-plus-circle fa-2x mb-2"></i>
                                        <p class="mb-0">No techniques defined</p>
                                        <button type="button" class="btn btn-sm btn-outline-success mt-2" onclick="createTechniqueForPhase('@phase')">
                                            Add Technique
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Technique Modal -->
<div class="modal fade" id="createTechniqueModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Lockheed Kill Chain Technique</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="techniqueForm">
                    <input type="hidden" id="techniqueId" value="0">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniqueName" class="form-label">Technique Name</label>
                                <input type="text" class="form-control" id="techniqueName" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniquePhase" class="form-label">Kill Chain Phase</label>
                                <select class="form-control" id="techniquePhase" required>
                                    @foreach (var phase in phases)
                                    {
                                        <option value="@phase">@phase.ToString().Replace("_", " ")</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="techniqueDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="techniqueDescription" rows="3" required></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniqueEnvironment" class="form-label">Environment Type (Optional)</label>
                                <input type="text" class="form-control" id="techniqueEnvironment" placeholder="e.g., Corporate, Azure, OT">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniqueComplexity" class="form-label">Complexity</label>
                                <select class="form-control" id="techniqueComplexity" required>
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniqueTechniques" class="form-label">Techniques/Methods</label>
                                <textarea class="form-control" id="techniqueTechniques" rows="2" placeholder="Tools and methods used..."></textarea>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniqueTools" class="form-label">Tools</label>
                                <textarea class="form-control" id="techniqueTools" rows="2" placeholder="Specific tools and software..."></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniquePrerequisites" class="form-label">Prerequisites</label>
                                <textarea class="form-control" id="techniquePrerequisites" rows="2" placeholder="Required conditions..."></textarea>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniqueOutcome" class="form-label">Expected Outcome</label>
                                <textarea class="form-control" id="techniqueOutcome" rows="2" placeholder="What this technique achieves..."></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="techniqueTime" class="form-label">Estimated Time (minutes)</label>
                                <input type="number" class="form-control" id="techniqueTime" value="30" min="1">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3 form-check mt-4">
                                <input type="checkbox" class="form-check-input" id="techniqueUserInteraction">
                                <label class="form-check-label" for="techniqueUserInteraction">
                                    Requires User Interaction
                                </label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="saveTechnique()">Save Technique</button>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetPhaseColor(CyberRiskApp.Models.CyberKillChainPhase phase)
    {
        return phase switch
        {
            CyberRiskApp.Models.CyberKillChainPhase.Reconnaissance => "info",
            CyberRiskApp.Models.CyberKillChainPhase.Weaponization => "warning",
            CyberRiskApp.Models.CyberKillChainPhase.Delivery => "danger",
            CyberRiskApp.Models.CyberKillChainPhase.Exploitation => "primary",
            CyberRiskApp.Models.CyberKillChainPhase.Installation => "secondary",
            CyberRiskApp.Models.CyberKillChainPhase.CommandAndControl => "dark",
            CyberRiskApp.Models.CyberKillChainPhase.ActionsOnObjectives => "success",
            _ => "secondary"
        };
    }
    
    string GetPhaseIcon(CyberRiskApp.Models.CyberKillChainPhase phase)
    {
        return phase switch
        {
            CyberRiskApp.Models.CyberKillChainPhase.Reconnaissance => "fa-search",
            CyberRiskApp.Models.CyberKillChainPhase.Weaponization => "fa-tools",
            CyberRiskApp.Models.CyberKillChainPhase.Delivery => "fa-paper-plane",
            CyberRiskApp.Models.CyberKillChainPhase.Exploitation => "fa-bug",
            CyberRiskApp.Models.CyberKillChainPhase.Installation => "fa-download",
            CyberRiskApp.Models.CyberKillChainPhase.CommandAndControl => "fa-satellite-dish",
            CyberRiskApp.Models.CyberKillChainPhase.ActionsOnObjectives => "fa-bullseye",
            _ => "fa-cog"
        };
    }
}

@section Scripts {
<script>
function createTechniqueForPhase(phase) {
    document.getElementById('techniquePhase').value = phase;
    var modal = new bootstrap.Modal(document.getElementById('createTechniqueModal'));
    modal.show();
}

function editTechnique(id) {
    // Fetch technique details and populate form
    fetch(`/ThreatModeling/GetKillChainActivities/${id}`)
        .then(response => response.json())
        .then(technique => {
            document.getElementById('techniqueId').value = technique.id;
            document.getElementById('techniqueName').value = technique.name;
            document.getElementById('techniqueDescription').value = technique.description;
            document.getElementById('techniquePhase').value = technique.phase;
            document.getElementById('techniqueEnvironment').value = technique.environmentType || '';
            document.getElementById('techniqueComplexity').value = technique.complexity;
            document.getElementById('techniqueTechniques').value = technique.techniques || '';
            document.getElementById('techniqueTools').value = technique.tools || '';
            document.getElementById('techniquePrerequisites').value = technique.prerequisites || '';
            document.getElementById('techniqueOutcome').value = technique.expectedOutcome || '';
            document.getElementById('techniqueTime').value = technique.estimatedTimeMinutes || 30;
            document.getElementById('techniqueUserInteraction').checked = technique.requiresUserInteraction || false;
            
            document.querySelector('#createTechniqueModal .modal-title').textContent = 'Edit Lockheed Kill Chain Technique';
            
            var modal = new bootstrap.Modal(document.getElementById('createTechniqueModal'));
            modal.show();
        })
        .catch(error => {
            console.error('Error fetching technique:', error);
            alert('Error loading technique details');
        });
}

function saveTechnique() {
    const form = document.getElementById('techniqueForm');
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }
    
    const techniqueData = {
        name: document.getElementById('techniqueName').value,
        description: document.getElementById('techniqueDescription').value,
        phase: document.getElementById('techniquePhase').value,
        environmentType: document.getElementById('techniqueEnvironment').value,
        complexity: document.getElementById('techniqueComplexity').value,
        techniques: document.getElementById('techniqueTechniques').value,
        tools: document.getElementById('techniqueTools').value,
        prerequisites: document.getElementById('techniquePrerequisites').value,
        expectedOutcome: document.getElementById('techniqueOutcome').value,
        estimatedTimeMinutes: parseInt(document.getElementById('techniqueTime').value) || 30,
        requiresUserInteraction: document.getElementById('techniqueUserInteraction').checked
    };
    
    const id = document.getElementById('techniqueId').value;
    const isEdit = id && id !== '0';
    
    const url = isEdit ? '/ThreatModeling/UpdateKillChainActivity' : '/ThreatModeling/CreateKillChainActivity';
    const method = isEdit ? 'PUT' : 'POST';
    
    if (isEdit) {
        techniqueData.id = parseInt(id);
    }
    
    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(techniqueData)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            bootstrap.Modal.getInstance(document.getElementById('createTechniqueModal')).hide();
            location.reload(); // Refresh the page to show the new technique
        } else {
            alert('Error saving technique: ' + (result.error || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error('Error saving technique:', error);
        alert('Error saving technique. Please try again.');
    });
}

function deleteTechnique(id) {
    if (confirm('Are you sure you want to delete this technique?')) {
        fetch(`/ThreatModeling/DeleteKillChainActivity/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                location.reload(); // Refresh the page
            } else {
                alert('Error deleting technique: ' + (result.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error deleting technique:', error);
            alert('Error deleting technique. Please try again.');
        });
    }
}

// Reset form when modal is hidden
document.getElementById('createTechniqueModal').addEventListener('hidden.bs.modal', function () {
    document.getElementById('techniqueForm').reset();
    document.getElementById('techniqueId').value = '0';
    document.querySelector('#createTechniqueModal .modal-title').textContent = 'Create Lockheed Kill Chain Technique';
});
</script>
}

@section Styles {
<style>
.technique-card {
    transition: all 0.2s ease;
    cursor: pointer;
}

.technique-card:hover {
    background-color: #f8f9fa;
    border-color: #007bff !important;
}

.card-header {
    border: none;
}

.btn-group-sm .btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
}
</style>
}