@model CyberRiskApp.ViewModels.MaturityAssessmentDetailsViewModel
@using CyberRiskApp.Extensions
@{
    ViewData["Title"] = $"Assessment Details - {Model.Assessment.Title}";

    // Helper function to get available maturity levels based on framework type
    IEnumerable<CyberRiskApp.Models.MaturityLevel> GetAvailableMaturityLevels(CyberRiskApp.Models.FrameworkType frameworkType)
    {
        if (frameworkType == CyberRiskApp.Models.FrameworkType.NISTCSF)
        {
            // NIST CSF uses levels 0-4
            return new[] {
                CyberRiskApp.Models.MaturityLevel.NotImplemented,
                CyberRiskApp.Models.MaturityLevel.Initial,
                CyberRiskApp.Models.MaturityLevel.Developing,
                CyberRiskApp.Models.MaturityLevel.Defined,
                CyberRiskApp.Models.MaturityLevel.Managed
            };
        }
        else if (frameworkType == CyberRiskApp.Models.FrameworkType.C2M2)
        {
            // C2M2 uses levels 1-3
            return new[] {
                CyberRiskApp.Models.MaturityLevel.Initial,
                CyberRiskApp.Models.MaturityLevel.Developing,
                CyberRiskApp.Models.MaturityLevel.Defined
            };
        }
        else
        {
            // Default to all levels
            return Enum.GetValues<CyberRiskApp.Models.MaturityLevel>();
        }
    }
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Assessment Header -->
            <div class="card mb-4">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h4><i class="fas fa-chart-line me-2"></i>@Model.Assessment.Title</h4>
                            <small class="text-muted">
                                Framework: @Model.Assessment.Framework?.Name |
                                Organization: @Model.Assessment.Organization?.Name
                            </small>
                        </div>
                        <div class="col-md-4 text-end">
                            <span class="badge badge-@(Model.Assessment.Status == CyberRiskApp.Models.AssessmentStatus.Completed ? "success" : Model.Assessment.Status == CyberRiskApp.Models.AssessmentStatus.InProgress ? "warning" : "secondary") fs-6">
                                @Model.Assessment.Status
                            </span>
                            @if (ViewBag.CanPerformAssessments)
                            {
                                <div class="btn-group mt-2" role="group">
                                    <a asp-action="PerformBulk" asp-route-id="@Model.Assessment.Id" class="btn btn-primary btn-sm">
                                        <i class="fas fa-tasks me-1"></i>Perform Assessment
                                    </a>
                                    <a asp-action="BulkView" asp-route-id="@Model.Assessment.Id" class="btn btn-outline-info btn-sm">
                                        <i class="fas fa-th-list me-1"></i>Bulk View
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@Model.Assessment.Id" class="btn btn-outline-secondary btn-sm">
                                        <i class="fas fa-edit me-1"></i>Edit
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <small><strong>Assessor:</strong></small>
                            <p>@Model.Assessment.Assessor</p>
                        </div>
                        <div class="col-md-3">
                            <small><strong>Start Date:</strong></small>
                            <p>@Model.Assessment.StartDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <div class="col-md-3">
                            <small><strong>Due Date:</strong></small>
                            <p>@(Model.Assessment.DueDate?.ToString("MMM dd, yyyy") ?? "Not set")</p>
                        </div>
                        <div class="col-md-3">
                            <small><strong>Completed Date:</strong></small>
                            <p>@(Model.Assessment.CompletedDate?.ToString("MMM dd, yyyy") ?? "Not completed")</p>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Assessment.Description))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <small><strong>Description:</strong></small>
                                <p>@Model.Assessment.Description</p>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Overall Score Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-trophy me-2"></i>Overall Maturity Score</h5>
                </div>
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            @{
                                var maxScore = Model.Assessment.Framework?.Type == CyberRiskApp.Models.FrameworkType.C2M2 ? 3.0m : 4.0m;
                                var actualScore = Model.Assessment.Framework?.Type == CyberRiskApp.Models.FrameworkType.C2M2 ? 
                                    Model.Assessment.GetActualMaturityLevel() : Model.OverallScore;
                                var scorePercentage = (actualScore / maxScore) * 100;
                                var scoreClass = scorePercentage >= 75 ? "success" : scorePercentage >= 50 ? "warning" : "danger";
                            }
                            <div class="display-4 text-@scoreClass">@Model.Assessment.GetDisplayMaturityLevel()</div>
                            <div class="text-muted">out of @maxScore.ToString("F0")</div>
                            <div class="progress mt-2" style="height: 10px;">
                                <div class="progress-bar bg-@scoreClass" role="progressbar" style="width: @scorePercentage.ToString("F0")%"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            @if (Model.MaturityDistribution.Any())
                            {
                                <h6>Maturity Level Distribution</h6>
                                @foreach (var item in Model.MaturityDistribution.OrderBy(x => x.Key))
                                {
                                    <div class="d-flex justify-content-between">
                                        <span>Level @((int)item.Key) (@item.Key):</span>
                                        <span><strong>@item.Value controls</strong></span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Function/Domain Scores -->
            @if (Model.FunctionScores.Any() || Model.DomainScores.Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>
                            <i class="fas fa-chart-bar me-2"></i>
                            @if (Model.Assessment.Framework?.Type == CyberRiskApp.Models.FrameworkType.NISTCSF)
                            {
                                <text>Function Scores</text>
                            }
                            else
                            {
                                <text>Domain Scores</text>
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @{
                                var scores = Model.FunctionScores.Any() ? Model.FunctionScores : Model.DomainScores;
                            }
                            @foreach (var score in scores.OrderBy(x => x.Key))
                            {
                                var percentage = (score.Value / maxScore) * 100;
                                var progressClass = percentage >= 75 ? "success" : percentage >= 50 ? "warning" : "danger";

                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-title">@score.Key</h6>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="text-@progressClass fw-bold">@score.Value.ToString("F1")</span>
                                                <small class="text-muted">/ @maxScore.ToString("F0")</small>
                                            </div>
                                            <div class="progress mt-2" style="height: 8px;">
                                                <div class="progress-bar bg-@progressClass" role="progressbar" style="width: @percentage.ToString("F0")%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Summary Statistics -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h4 class="text-primary">@Model.ControlAssessments.Count()</h4>
                            <small class="text-muted">Total Controls</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h4 class="text-warning">@Model.ControlsNeedingImprovement</h4>
                            <small class="text-muted">Controls Needing Improvement</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h4 class="text-info">@Model.ProjectsRequired</h4>
                            <small class="text-muted">Projects Required</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            @{
                                var completedControls = Model.ControlAssessments.Count(ca => ca.AssessmentDate.HasValue);
                                var completionPercentage = Model.ControlAssessments.Any() ? (decimal)completedControls / Model.ControlAssessments.Count() * 100 : 0;
                            }
                            <h4 class="text-success">@completionPercentage.ToString("F0")%</h4>
                            <small class="text-muted">Assessment Progress</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Key Recommendations -->
            @if (Model.KeyRecommendations != null && Model.KeyRecommendations.Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-lightbulb me-2"></i>Key Recommendations</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-unstyled">
                            @foreach (var recommendation in Model.KeyRecommendations)
                            {
                                <li class="mb-2">
                                    <i class="fas fa-arrow-right text-primary me-2"></i>@recommendation
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }

            <!-- High Priority Gaps -->
            @if (Model.HighPriorityGaps != null && Model.HighPriorityGaps.Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-exclamation-triangle text-warning me-2"></i>High Priority Gaps</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Control</th>
                                        <th>Current Level</th>
                                        <th>Target Level</th>
                                        <th>Gap</th>
                                        <th>Priority</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var gap in Model.HighPriorityGaps.Take(10))
                                    {
                                        <tr>
                                            <td>
                                                <strong>@gap.Control.ControlId</strong><br>
                                                <small class="text-muted">@gap.Control.Title</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@gap.CurrentMaturityLevel</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-primary">@gap.TargetMaturityLevel</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-warning">@((int)gap.TargetMaturityLevel - (int)gap.CurrentMaturityLevel)</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(gap.Control.Priority == CyberRiskApp.Models.ControlPriority.Critical ? "danger" : gap.Control.Priority == CyberRiskApp.Models.ControlPriority.High ? "warning" : "info")">
                                                    @gap.Control.Priority
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }

            <!-- Projects Required -->
            @if (Model.ProjectsRequiredList != null && Model.ProjectsRequiredList.Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-project-diagram me-2"></i>Projects Required</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var project in Model.ProjectsRequiredList.Take(12))
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-title">@project.Control.ControlId</h6>
                                            <p class="card-text small">@project.Control.Title</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                @if (project.TShirtSize.HasValue)
                                                {
                                                    <span class="badge bg-info">@project.TShirtSize</span>
                                                }
                                                @if (project.TargetCompletionDate.HasValue)
                                                {
                                                    <small class="text-muted">Due: @project.TargetCompletionDate.Value.ToString("MMM yyyy")</small>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Control Assessments Table -->
            <div class="card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5><i class="fas fa-list me-2"></i>Control Assessments (@Model.ControlAssessments.Count())</h5>
                        <div>
                            @if (ViewBag.CanPerformAssessments)
                            {
                                <button class="btn btn-sm btn-outline-primary me-2" onclick="showBulkPriorityModal()">
                                    <i class="fas fa-flag me-1"></i>Bulk Priority
                                </button>
                                <button class="btn btn-sm btn-outline-info me-2" onclick="showBulkTargetLevelModal()">
                                    <i class="fas fa-target me-1"></i>Bulk Target Level
                                </button>
                            }
                            <button class="btn btn-sm btn-outline-secondary" onclick="toggleControlsView()">
                                <i class="fas fa-eye me-1"></i>Toggle View
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="controlsTable">
                            <thead class="table-dark">
                                <tr>
                                    @if (ViewBag.CanPerformAssessments)
                                    {
                                        <th style="width: 40px;">
                                            <input type="checkbox" id="selectAll" onchange="toggleSelectAll(this)">
                                        </th>
                                    }
                                    <th>Control ID</th>
                                    <th>Title</th>
                                    @if (Model.Assessment.Framework?.Type == CyberRiskApp.Models.FrameworkType.NISTCSF)
                                    {
                                        <th>Function</th>
                                    }
                                    else if (Model.Assessment.Framework?.Type == CyberRiskApp.Models.FrameworkType.C2M2)
                                    {
                                        <th>Domain</th>
                                    }
                                    else
                                    {
                                        <th>Category</th>
                                    }
                                    <th>Priority</th>
                                    <th>Current Level</th>
                                    <th>Target Level</th>
                                    <th>Gap</th>
                                    <th>Project</th>
                                    <th>Owner</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ca in Model.ControlAssessments.OrderBy(x => x.Control.Function).ThenBy(x => x.Control.ControlId))
                                {
                                    var hasGap = ca.CurrentMaturityLevel < ca.TargetMaturityLevel;
                                    <tr class="@(hasGap ? "table-warning" : "")">
                                        @if (ViewBag.CanPerformAssessments)
                                        {
                                            <td>
                                                <input type="checkbox" class="control-checkbox"
                                                       value="@ca.Control.Id"
                                                       data-control-assessment-id="@ca.Id">
                                            </td>
                                        }
                                        <td><strong>@ca.Control.ControlId</strong></td>
                                        <td>@ca.Control.Title</td>
                                        <td>@ca.Control.Function</td>
                                        <td>
                                            @if (ViewBag.CanPerformAssessments)
                                            {
                                                <select class="form-select form-select-sm priority-select"
                                                        data-control-id="@ca.Control.Id"
                                                        onchange="updateControlPriority(@ca.Control.Id, this.value)">
                                                    @foreach (CyberRiskApp.Models.ControlPriority priority in Enum.GetValues<CyberRiskApp.Models.ControlPriority>())
                                                    {
                                                        <option value="@((int)priority)" selected="@(ca.Control.Priority == priority ? "selected" : null)">
                                                            @priority
                                                        </option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {
                                                <span class="badge bg-@(ca.Control.Priority == CyberRiskApp.Models.ControlPriority.Critical ? "danger" : ca.Control.Priority == CyberRiskApp.Models.ControlPriority.High ? "warning" : ca.Control.Priority == CyberRiskApp.Models.ControlPriority.Medium ? "info" : "secondary")">
                                                    @ca.Control.Priority
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@(ca.CurrentMaturityLevel == CyberRiskApp.Models.MaturityLevel.NotImplemented ? "danger" : ca.CurrentMaturityLevel == CyberRiskApp.Models.MaturityLevel.Initial ? "warning" : "success")">
                                                @ca.CurrentMaturityLevel
                                            </span>
                                        </td>
                                        <td>
                                            @if (ViewBag.CanPerformAssessments)
                                            {
                                                <select class="form-select form-select-sm target-level-select"
                                                        data-control-assessment-id="@ca.Id"
                                                        onchange="updateTargetLevel(@ca.Id, this.value)">
                                                    @{
                                                        var availableLevels = GetAvailableMaturityLevels(Model.Assessment.Framework?.Type ?? CyberRiskApp.Models.FrameworkType.Custom);
                                                    }
                                                    @foreach (var level in availableLevels)
                                                    {
                                                        <option value="@((int)level)" selected="@(ca.TargetMaturityLevel == level ? "selected" : null)">
                                                            Level @((int)level) - @level
                                                        </option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {
                                                <span class="badge bg-primary">@ca.TargetMaturityLevel</span>
                                            }
                                        </td>
                                        <td>
                                            @if (hasGap)
                                            {
                                                <span class="badge bg-warning">@((int)ca.TargetMaturityLevel - (int)ca.CurrentMaturityLevel)</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">✓</span>
                                            }
                                        </td>
                                        <td>
                                            @if (ca.ProjectNeeded)
                                            {
                                                <span class="badge bg-info">
                                                    @(ca.TShirtSize?.ToString() ?? "Required")
                                                </span>
                                            }
                                        </td>
                                        <td>@ca.Ownership</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="row">
                <div class="col-12 text-center">
                    <a asp-action="Index" class="btn btn-secondary me-2">
                        <i class="fas fa-arrow-left me-1"></i>Back to Assessments
                    </a>
                    @if (ViewBag.CanPerformAssessments)
                    {
                        <a asp-action="PerformBulk" asp-route-id="@Model.Assessment.Id" class="btn btn-primary me-2">
                            <i class="fas fa-tasks me-1"></i>Perform Assessment
                        </a>
                        <a asp-action="Edit" asp-route-id="@Model.Assessment.Id" class="btn btn-outline-primary">
                            <i class="fas fa-edit me-1"></i>Edit Assessment
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

    </div>
</div>

<!-- Bulk Priority Update Modal -->
<div class="modal fade" id="bulkPriorityModal" tabindex="-1" aria-labelledby="bulkPriorityModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bulkPriorityModalLabel">Bulk Update Priority</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="bulkPriorityForm" method="post" asp-action="BulkUpdatePriority">
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="assessmentId" value="@Model.Assessment.Id" />
                    <input type="hidden" name="controlIds" id="selectedControlIds" />

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <span id="selectedCount">0</span> controls selected for priority update.
                    </div>

                    <div class="mb-3">
                        <label for="bulkPriority" class="form-label">New Priority Level</label>
                        <select name="priority" id="bulkPriority" class="form-select" required>
                            <option value="">-- Select Priority --</option>
                            @foreach (CyberRiskApp.Models.ControlPriority priority in Enum.GetValues<CyberRiskApp.Models.ControlPriority>())
                            {
                                <option value="@((int)priority)">@priority</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Priority</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bulk Target Level Update Modal -->
<div class="modal fade" id="bulkTargetLevelModal" tabindex="-1" aria-labelledby="bulkTargetLevelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bulkTargetLevelModalLabel">Bulk Update Target Level</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="bulkTargetLevelForm" method="post" asp-action="BulkUpdateTargetLevel">
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="assessmentId" value="@Model.Assessment.Id" />
                    <input type="hidden" name="controlAssessmentIds" id="selectedControlAssessmentIds" />

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <span id="selectedCountTarget">0</span> controls selected for target level update.
                    </div>

                    <div class="mb-3">
                        <label for="bulkTargetLevel" class="form-label">New Target Level</label>
                        <select name="targetLevel" id="bulkTargetLevel" class="form-select" required>
                            <option value="">-- Select Target Level --</option>
                            @foreach (var level in GetAvailableMaturityLevels(Model.Assessment.Framework?.Type ?? CyberRiskApp.Models.FrameworkType.Custom))
                            {
                                <option value="@((int)level)">Level @((int)level) - @level</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-info">Update Target Level</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleControlsView() {
            const table = document.getElementById('controlsTable');
            const rows = table.querySelectorAll('tbody tr');

            rows.forEach(row => {
                if (row.style.display === 'none') {
                    row.style.display = '';
                } else {
                    // Only show rows with gaps
                    if (row.classList.contains('table-warning')) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                }
            });
        }

        // Update individual control priority
        function updateControlPriority(controlId, priority) {
            fetch('@Url.Action("UpdateControlPriority", "MaturityAssessments")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `controlId=${controlId}&priority=${priority}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Priority updated successfully', 'success');
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating priority', 'error');
            });
        }

        // Update individual control target level
        function updateTargetLevel(controlAssessmentId, targetLevel) {
            fetch('@Url.Action("UpdateTargetLevel", "MaturityAssessments")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `controlAssessmentId=${controlAssessmentId}&targetLevel=${targetLevel}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Target level updated successfully', 'success');
                    // Refresh the page to update gap calculations
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating target level', 'error');
            });
        }

        // Select/Deselect all checkboxes
        function toggleSelectAll(selectAllCheckbox) {
            const checkboxes = document.querySelectorAll('.control-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
            updateSelectedCount();
        }

        // Update selected count and enable/disable bulk actions
        function updateSelectedCount() {
            const checkedBoxes = document.querySelectorAll('.control-checkbox:checked');
            const count = checkedBoxes.length;
            document.getElementById('selectedCount').textContent = count;
            document.getElementById('selectedCountTarget').textContent = count;

            // Enable/disable bulk actions based on selection
            const bulkButtons = document.querySelectorAll('.bulk-action');
            bulkButtons.forEach(button => {
                button.disabled = count === 0;
            });
        }

        // Show bulk priority modal
        function showBulkPriorityModal() {
            const checkedBoxes = document.querySelectorAll('.control-checkbox:checked');
            if (checkedBoxes.length === 0) {
                showToast('Please select at least one control', 'warning');
                return;
            }

            const controlIds = Array.from(checkedBoxes).map(cb => cb.value);
            document.getElementById('selectedControlIds').value = controlIds.join(',');

            const modal = new bootstrap.Modal(document.getElementById('bulkPriorityModal'));
            modal.show();
        }

        // Show bulk target level modal
        function showBulkTargetLevelModal() {
            const checkedBoxes = document.querySelectorAll('.control-checkbox:checked');
            if (checkedBoxes.length === 0) {
                showToast('Please select at least one control', 'warning');
                return;
            }

            const controlAssessmentIds = Array.from(checkedBoxes).map(cb => cb.getAttribute('data-control-assessment-id'));
            document.getElementById('selectedControlAssessmentIds').value = controlAssessmentIds.join(',');

            const modal = new bootstrap.Modal(document.getElementById('bulkTargetLevelModal'));
            modal.show();
        }

        // Handle bulk priority form submission
        document.getElementById('bulkPriorityForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const controlIds = formData.get('controlIds').split(',');

            // Convert to proper format for ASP.NET Core model binding
            const params = new URLSearchParams();
            params.append('assessmentId', formData.get('assessmentId'));
            params.append('priority', formData.get('priority'));

            controlIds.forEach((id, index) => {
                params.append(`controlIds[${index}]`, id);
            });

            // Add antiforgery token
            params.append('__RequestVerificationToken', formData.get('__RequestVerificationToken'));

            fetch(this.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: params
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    showToast('Error updating priorities', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating priorities', 'error');
            });
        });

        // Handle bulk target level form submission
        document.getElementById('bulkTargetLevelForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const controlAssessmentIds = formData.get('controlAssessmentIds').split(',');

            // Convert to proper format for ASP.NET Core model binding
            const params = new URLSearchParams();
            params.append('assessmentId', formData.get('assessmentId'));
            params.append('targetLevel', formData.get('targetLevel'));

            controlAssessmentIds.forEach((id, index) => {
                params.append(`controlAssessmentIds[${index}]`, id);
            });

            // Add antiforgery token
            params.append('__RequestVerificationToken', formData.get('__RequestVerificationToken'));

            fetch(this.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: params
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    showToast('Error updating target levels', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating target levels', 'error');
            });
        });

        // Toast notification helper
        function showToast(message, type) {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'warning'} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            document.body.appendChild(toast);

            // Auto-remove after 3 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 3000);
        }

        // Initialize page
        $(document).ready(function() {
            // Add event listeners to checkboxes
            document.querySelectorAll('.control-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectedCount);
            });

            // Initialize DataTable if available
            if (typeof $.fn.DataTable !== 'undefined') {
                $('#controlsTable').DataTable({
                    pageLength: 25,
                    order: [[1, 'asc']], // Order by Control ID
                    columnDefs: [
                        { orderable: false, targets: [0] } // Disable sorting on checkbox column
                    ]
                });
            }
        });
    </script>
}