@model CyberRiskApp.ViewModels.FAIRAssessmentViewModel
@{
    ViewData["Title"] = "Edit Risk Assessment";
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-md-11">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-edit text-primary me-2"></i>
                    Edit Risk Assessment
                </h2>
                <div>
                    <a asp-action="Details" asp-route-id="@Model.Assessment.Id" class="btn btn-outline-info me-2">
                        <i class="fas fa-eye me-1"></i>View Details
                    </a>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-1"></i>Back to List
                    </a>
                </div>
            </div>

            <form asp-action="Edit" method="post" id="riskAssessmentForm">
                <input asp-for="Assessment.Id" type="hidden" />
                <div asp-validation-summary="All" class="alert alert-danger"></div>
                
                <!-- Assessment Info Bar -->
                <div class="alert alert-info mb-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Created:</strong> @Model.Assessment.CreatedAt.ToString("MMM dd, yyyy")
                        </div>
                        <div class="col-md-3">
                            <strong>Assessor:</strong> @Model.Assessment.Assessor
                        </div>
                        <div class="col-md-3">
                            <strong>Status:</strong> 
                            <span class="badge bg-@(Model.Assessment.Status == CyberRiskApp.Models.AssessmentStatus.Completed ? "success" : "warning")">
                                @Model.Assessment.Status
                            </span>
                        </div>
                        <div class="col-md-3">
                            <strong>Last Updated:</strong> @Model.Assessment.UpdatedAt.ToString("MMM dd, yyyy")
                        </div>
                    </div>
                </div>
                
                <!-- Basic Information -->
                <div class="card mb-4">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Title" class="form-label fw-bold">Assessment Title <span class="text-danger">*</span></label>
                                    <input asp-for="Assessment.Title" class="form-control" required />
                                    <span asp-validation-for="Assessment.Title" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Asset" class="form-label fw-bold">Primary Asset <span class="text-danger">*</span></label>
                                    @Html.AssetComboboxFor(m => m.Assessment.Asset, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCUser"), required: true)
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.BusinessUnit" class="form-label fw-bold">Business Unit</label>
                                    @Html.BusinessUnitComboboxFor(m => m.Assessment.BusinessUnit, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCUser"))
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.BusinessOwner" class="form-label fw-bold">Business Owner</label>
                                    @Html.BusinessOwnerComboboxFor(m => m.Assessment.BusinessOwner, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCUser"))
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.AssessmentType" class="form-label fw-bold">Assessment Type</label>
                                    <select asp-for="Assessment.AssessmentType" class="form-control" id="assessmentType">
                                        <option value="1">FAIR (Quantitative)</option>
                                        <option value="0">Qualitative</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.CIATriad" class="form-label fw-bold">CIA Triad Impact</label>
                                    <select asp-for="Assessment.CIATriad" class="form-control">
                                        <option value="">Select CIA Impact</option>
                                        <option value="1">Confidentiality</option>
                                        <option value="2">Integrity</option>
                                        <option value="3">Availability</option>
                                        <option value="4">Confidentiality & Integrity</option>
                                        <option value="5">Confidentiality & Availability</option>
                                        <option value="6">Integrity & Availability</option>
                                        <option value="7">All Three (CIA)</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Assessment.ThreatScenario" class="form-label fw-bold">Threat Scenario <span class="text-danger">*</span></label>
                            <textarea asp-for="Assessment.ThreatScenario" class="form-control" rows="3" required></textarea>
                            <span asp-validation-for="Assessment.ThreatScenario" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Assessment.Description" class="form-label fw-bold">Additional Description</label>
                            <textarea asp-for="Assessment.Description" class="form-control" rows="2"></textarea>
                        </div>

                    </div>
                </div>

                <!-- Identified Risks Section -->
                <div class="card mb-4">
                    <div class="card-header bg-danger bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-exclamation-triangle me-2"></i>Identified Risks
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Add specific risks identified during this assessment that need to be tracked and managed.
                        </div>
                        
                        <!-- Column Headers -->
                        <div class="row mb-2 d-none" id="riskHeaders">
                            <div class="col-md-2">
                                <small class="text-muted fw-bold">Risk Title</small>
                            </div>
                            <div class="col-md-3">
                                <small class="text-muted fw-bold">Risk Description</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Owner</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Inherent Risk</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Treatment</small>
                            </div>
                            <div class="col-md-2">
                                <small class="text-muted fw-bold">Additional Controls</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Residual Risk</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Actions</small>
                            </div>
                        </div>
                        
                        <div id="risksContainer">
                            <!-- Existing risks will be loaded here -->
                        </div>
                        
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="addRisk()">
                            <i class="fas fa-plus me-2"></i>Add Risk
                        </button>
                    </div>
                </div>

                <!-- FAIR Analysis Section -->
                <div id="fairSection" class="card mb-4" style="@(Model.Assessment.AssessmentType == CyberRiskApp.Models.AssessmentType.FAIR ? "display: block;" : "display: none;")">
                    <div class="card-header bg-success bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-calculator me-2"></i>FAIR Analysis
                        </h5>
                    </div>
                    <div class="card-body">
                        <!-- Threat Analysis -->
                        <h6 class="text-primary border-bottom pb-2 mb-3">
                            <i class="fas fa-user-ninja me-2"></i>Threat Analysis
                        </h6>
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatCommunity" class="form-label fw-bold">Threat Community</label>
                                    <select asp-for="Assessment.ThreatCommunity" class="form-control">
                                        <option value="">Select Threat Community</option>
                                        <option value="External Actors">External Actors</option>
                                        <option value="Internal Actors">Internal Actors</option>
                                        <option value="Trusted Insiders">Trusted Insiders</option>
                                        <option value="Privileged Insiders">Privileged Insiders</option>
                                        <option value="Partners">Partners</option>
                                        <option value="Suppliers">Suppliers</option>
                                        <option value="Nation States">Nation States</option>
                                        <option value="Organized Crime">Organized Crime</option>
                                        <option value="Hacktivists">Hacktivists</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatAction" class="form-label fw-bold">Threat Action</label>
                                    <select asp-for="Assessment.ThreatAction" class="form-control">
                                        <option value="">Select Threat Action</option>
                                        <option value="Data Exfiltration">Data Exfiltration</option>
                                        <option value="Ransomware">Ransomware</option>
                                        <option value="Business Email Compromise">Business Email Compromise</option>
                                        <option value="Denial of Service">Denial of Service</option>
                                        <option value="Data Manipulation">Data Manipulation</option>
                                        <option value="System Compromise">System Compromise</option>
                                        <option value="Physical Theft">Physical Theft</option>
                                        <option value="Social Engineering">Social Engineering</option>
                                        <option value="Supply Chain Attack">Supply Chain Attack</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Threat Event Frequency Distribution -->
                        <h6 class="text-primary border-bottom pb-2 mb-3">
                            <i class="fas fa-clock me-2"></i>Threat Event Frequency (Annual)
                        </h6>
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequencyMin" class="form-label fw-bold">Minimum</label>
                                    <input asp-for="Assessment.ThreatEventFrequencyMin" type="number" step="0.1" class="form-control tef-input" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequency" class="form-label fw-bold">Most Likely</label>
                                    <input asp-for="Assessment.ThreatEventFrequency" type="number" step="0.1" class="form-control tef-input" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequencyMax" class="form-label fw-bold">Maximum</label>
                                    <input asp-for="Assessment.ThreatEventFrequencyMax" type="number" step="0.1" class="form-control tef-input" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequencyConfidence" class="form-label fw-bold">Confidence %</label>
                                    <select asp-for="Assessment.ThreatEventFrequencyConfidence" class="form-control">
                                        <option value="90">90%</option>
                                        <option value="95">95%</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Defense in Depth Controls -->
                        <h6 class="text-primary border-bottom pb-2 mb-3">
                            <i class="fas fa-shield-alt me-2"></i>Defense in Depth - Security Controls in Place
                        </h6>
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Add security controls to calculate vulnerability reduction through defense in depth.<br>
                            <strong>Combined effectiveness:</strong> <span id="combinedEffectiveness" class="text-success">0%</span> | 
                            <strong>Resulting vulnerability:</strong> <span id="resultingVulnerability" class="text-warning">100%</span>
                        </div>
                        
                        <div id="controlsContainer" class="mb-3">
                            <!-- Existing controls will be loaded here -->
                        </div>
                        
                        <button type="button" class="btn btn-sm btn-primary mb-4" onclick="addControl()">
                            <i class="fas fa-plus me-1"></i>Add Control
                        </button>

                        <!-- Primary Loss Magnitude -->
                        <h6 class="text-primary border-bottom pb-2 mb-3">
                            <i class="fas fa-dollar-sign me-2"></i>Primary Loss Magnitude Estimates
                        </h6>
                        
                        <!-- Productivity Loss -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-chart-line me-2"></i>Productivity Loss
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.ProductivityLossMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.ProductivityLossMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.ProductivityLossMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Response Costs -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-ambulance me-2"></i>Response Costs
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.ResponseCostsMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.ResponseCostsMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.ResponseCostsMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Replacement Cost -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-sync-alt me-2"></i>Replacement Cost
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.ReplacementCostMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.ReplacementCostMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.ReplacementCostMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Fines/Penalties -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-gavel me-2"></i>Fines/Penalties
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.FinesMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.FinesMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.FinesMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Secondary Loss Toggle -->
                        <div class="form-check mb-3">
                            <input asp-for="Assessment.IncludeSecondaryLoss" type="checkbox" class="form-check-input" id="includeSecondaryLoss" />
                            <label class="form-check-label fw-bold" for="includeSecondaryLoss">
                                <i class="fas fa-plus-circle me-2"></i>Include Secondary Loss Analysis
                            </label>
                        </div>

                        <!-- Secondary Loss Section -->
                        <div id="secondaryLossSection" style="display: @(Model.Assessment.IncludeSecondaryLoss ? "block" : "none");">
                            <h6 class="text-primary border-bottom pb-2 mb-3">
                                <i class="fas fa-layer-group me-2"></i>Secondary Loss Magnitude Estimates
                            </h6>
                            
                            <!-- Secondary Response Cost -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-ambulance me-2"></i>Secondary Response Cost
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.SecondaryResponseCostMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.SecondaryResponseCostMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.SecondaryResponseCostMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Reputation Damage -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-star me-2"></i>Reputation Damage
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ReputationDamageMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ReputationDamageMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ReputationDamageMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Competitive Advantage Loss -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-trophy me-2"></i>Competitive Advantage Loss
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.CompetitiveAdvantageLossMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.CompetitiveAdvantageLossMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.CompetitiveAdvantageLossMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- External Stakeholder Loss -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-users me-2"></i>External Stakeholder Loss
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ExternalStakeholderLossMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ExternalStakeholderLossMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ExternalStakeholderLossMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Simulation Settings -->
                        <h6 class="text-primary border-bottom pb-2 mb-3 mt-4">
                            <i class="fas fa-cogs me-2"></i>Monte Carlo Simulation Settings
                        </h6>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.SimulationIterations" class="form-label fw-bold">Monte Carlo Iterations</label>
                                    <select asp-for="Assessment.SimulationIterations" class="form-control">
                                        <option value="1000">1,000 (Fast)</option>
                                        <option value="10000">10,000 (Standard)</option>
                                        <option value="100000">100,000 (High Precision)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.DistributionType" class="form-label fw-bold">Distribution Type</label>
                                    <select asp-for="Assessment.DistributionType" class="form-control">
                                        <option value="PERT">PERT (Recommended)</option>
                                        <option value="Normal">Normal</option>
                                        <option value="Lognormal">Lognormal</option>
                                        <option value="Uniform">Uniform</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.LossMagnitudeConfidence" class="form-label fw-bold">Loss Estimate Confidence</label>
                                    <select asp-for="Assessment.LossMagnitudeConfidence" class="form-control">
                                        <option value="90">90%</option>
                                        <option value="95">95%</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Insurance Deduction -->
                        <div class="form-check mb-4">
                            <input asp-for="Assessment.DeductCybersecurityInsurance" type="checkbox" class="form-check-input" id="deductInsuranceCheckbox" />
                            <label asp-for="Assessment.DeductCybersecurityInsurance" class="form-check-label fw-bold">
                                <i class="fas fa-shield-alt me-2"></i>Deduct Cybersecurity Insurance from ALE
                            </label>
                        </div>
                        
                        <!-- Insurance Information (Hidden by default) -->
                        <div id="insuranceInfo" class="alert alert-info mb-4" style="display: @(Model.Assessment.DeductCybersecurityInsurance ? "block" : "none");">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Insurance Deduction:</strong> <span id="insuranceAmountDisplay">Loading...</span> will be deducted from the calculated ALE.
                            <br><small class="text-muted">Insurance amount is configured in Risk Level Settings by administrators.</small>
                        </div>

                        <!-- Real-time Calculation Preview -->
                        <div class="card bg-light border-success">
                            <div class="card-body">
                                <h6 class="text-success mb-3">
                                    <i class="fas fa-calculator me-2"></i>Estimated Results Preview (Single-Point)
                                </h6>
                                <div class="row text-center">
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">Vulnerability</small>
                                            <strong class="text-warning"><span id="vulnerabilityPreview">100</span>%</strong>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">LEF (Annual)</small>
                                            <strong class="text-info"><span id="lefPreview">-</span></strong>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">Primary Loss</small>
                                            <strong class="text-primary">$<span id="primaryLossPreview">-</span></strong>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">Est. ALE</small>
                                            <strong class="text-success">$<span id="alePreview">-</span></strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Qualitative Analysis Section (Hidden when FAIR is selected) -->
                <div id="qualitativeSection" class="card mb-4" style="@(Model.Assessment.AssessmentType == CyberRiskApp.Models.AssessmentType.Qualitative ? "display: block;" : "display: none;")">
                    <div class="card-header bg-warning bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-balance-scale me-2"></i>Qualitative Analysis
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.QualitativeLikelihood" class="form-label fw-bold">Likelihood Level</label>
                                    <select asp-for="Assessment.QualitativeLikelihood" asp-items="Html.GetEnumSelectList<CyberRiskApp.Models.LikelihoodLevel>()" class="form-control">
                                        <option value="">Select Likelihood</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.QualitativeImpact" class="form-label fw-bold">Impact Level</label>
                                    <select asp-for="Assessment.QualitativeImpact" asp-items="Html.GetEnumSelectList<CyberRiskApp.Models.ImpactLevel>()" class="form-control">
                                        <option value="">Select Impact</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.QualitativeExposure" class="form-label fw-bold">Exposure Level</label>
                                    <select asp-for="Assessment.QualitativeExposure" asp-items="Html.GetEnumSelectList<CyberRiskApp.Models.ExposureLevel>()" class="form-control">
                                        <option value="">Select Exposure</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Threat Analysis -->
                        <h6 class="text-primary border-bottom pb-2 mb-3 mt-4">
                            <i class="fas fa-user-ninja me-2"></i>Threat Analysis
                        </h6>
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatCommunity" class="form-label fw-bold">Threat Community</label>
                                    <select asp-for="Assessment.ThreatCommunity" class="form-control">
                                        <option value="">Select Threat Community</option>
                                        <option value="External Actors">External Actors</option>
                                        <option value="Internal Actors">Internal Actors</option>
                                        <option value="Trusted Insiders">Trusted Insiders</option>
                                        <option value="Privileged Insiders">Privileged Insiders</option>
                                        <option value="Partners">Partners</option>
                                        <option value="Suppliers">Suppliers</option>
                                        <option value="Nation States">Nation States</option>
                                        <option value="Organized Crime">Organized Crime</option>
                                        <option value="Hacktivists">Hacktivists</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatAction" class="form-label fw-bold">Threat Action</label>
                                    <select asp-for="Assessment.ThreatAction" class="form-control">
                                        <option value="">Select Threat Action</option>
                                        <option value="Data Exfiltration">Data Exfiltration</option>
                                        <option value="Ransomware">Ransomware</option>
                                        <option value="Business Email Compromise">Business Email Compromise</option>
                                        <option value="Denial of Service">Denial of Service</option>
                                        <option value="Data Manipulation">Data Manipulation</option>
                                        <option value="System Compromise">System Compromise</option>
                                        <option value="Physical Theft">Physical Theft</option>
                                        <option value="Social Engineering">Social Engineering</option>
                                        <option value="Supply Chain Attack">Supply Chain Attack</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Defense in Depth Controls for Qualitative Assessments -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2 mb-3">
                                    <i class="fas fa-shield-alt me-2"></i>Defense in Depth - Security Controls in Place
                                </h6>
                                <div class="alert alert-info mb-3">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Document security controls that are in place to mitigate this risk. These controls help inform the overall risk assessment but do not automatically calculate vulnerability reduction in qualitative assessments.
                                </div>
                                
                                <div id="qualitativeControlsContainer" class="mb-3">
                                    <!-- Controls will be dynamically added here -->
                                </div>
                                
                                <button type="button" class="btn btn-sm btn-primary mb-4" onclick="addQualitativeControl()">
                                    <i class="fas fa-plus me-1"></i>Add Control
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Submit Buttons -->
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fas fa-save me-2"></i>Update Assessment
                            </button>
                            <div>
                                <a asp-action="Details" asp-route-id="@Model.Assessment.Id" class="btn btn-info btn-lg me-2">
                                    <i class="fas fa-eye me-2"></i>View Details
                                </a>
                                <a asp-action="Index" class="btn btn-secondary btn-lg">
                                    <i class="fas fa-times me-2"></i>Cancel
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let controlIndex = @Model.Controls.Count;
        let qualitativeControlIndex = @Model.Controls.Count;
        let riskIndex = @(Model.Assessment.IdentifiedRisks?.Count ?? 0);
        let insuranceAmount = 0; // Store insurance amount for calculations
        
        // Control management functions
        function addControl() {
            const container = document.getElementById('controlsContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const controlHtml = `
                <div class="control-item card mb-2 border-primary" id="control_${controlIndex}">
                    <div class="card-body p-3">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <select name="Controls[${controlIndex}].ControlName" 
                                        class="form-select control-name-select" 
                                        data-category="5" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}"
                                        data-placeholder="Type to search controls..."
                                        required 
                                        style="width: 100%;">
                                    <option value="">Type to search controls...</option>
                                </select>
                                <input type="hidden" name="Controls[${controlIndex}].Id" value="0" />
                            </div>
                            <div class="col-md-2">
                                <select name="Controls[${controlIndex}].ControlType" class="form-control form-control-sm" required>
                                    <option value="Preventive">Preventive</option>
                                    <option value="Detective">Detective</option>
                                    <option value="Responsive">Responsive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="input-group input-group-sm">
                                    <input type="number" name="Controls[${controlIndex}].ControlEffectiveness" 
                                           class="form-control control-effectiveness" placeholder="%" 
                                           min="0" max="100" step="1" required onchange="updateVulnerability()" />
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <select name="Controls[${controlIndex}].ImplementationStatus" 
                                        class="form-control form-control-sm control-status" onchange="updateVulnerability()" required>
                                    <option value="Implemented">Implemented</option>
                                    <option value="Planned">Planned</option>
                                    <option value="NotImplemented">Not Implemented</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <input type="text" name="Controls[${controlIndex}].ControlDescription" 
                                       class="form-control form-control-sm" placeholder="Description" />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeControl(${controlIndex})" title="Remove Control">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', controlHtml);
            
            // Smart combobox will be initialized by global smart-combobox.js
            // No need to manually initialize here
            
            controlIndex++;
            updateVulnerability();
            
            // Trigger global initialization for newly added elements
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
        }
        
        // Setup smart combobox for newly added control
        function setupNewControlCombobox(index) {
            const select = document.querySelector(`select[name="Controls[${index}].ControlName"]`);
            if (!select) return;
            
            const $select = $(select);
            
            // Skip if already initialized
            if ($select.hasClass('select2-hidden-accessible')) {
                return;
            }
            
            // Initialize this specific element using the same logic as smart-combobox.js
            const category = $select.data('category');
            const canAddNew = $select.data('can-add-new') === 'true';
            const placeholder = $select.data('placeholder') || 'Type to search...';
            
            // Initialize Select2 with the same configuration as smart-combobox.js
            $select.select2({
                width: '100%',
                placeholder: placeholder,
                allowClear: true,
                minimumInputLength: 0,
                tags: canAddNew,
                ajax: {
                    url: `/api/referencedata/search/${category}`,
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            q: params.term || '',
                            page: params.page || 1
                        };
                    },
                    processResults: function (data, params) {
                        console.log('API Response for category', category, ':', data);
                        
                        // Check if response is valid JSON (detect HTML responses from auth redirects)
                        if (typeof data === 'string' && data.includes('<html>')) {
                            console.error('API returned HTML instead of JSON - likely authentication issue');
                            return { results: [] };
                        }
                        
                        const results = [];
                        
                        // Handle different response formats
                        let dataResults = [];
                        if (data && data.results) {
                            // Expected format: { results: [...] }
                            dataResults = data.results;
                        } else if (Array.isArray(data)) {
                            // Direct array format: [...]
                            dataResults = data;
                        } else {
                            console.error('API returned unexpected data structure:', data);
                            return { results: [] };
                        }
                        
                        // Add existing results
                        dataResults.forEach(function(item) {
                            results.push({
                                id: item.value || item.id || item,
                                text: item.value || item.label || item.text || item
                            });
                        });
                        
                        // Add "Add new" option if user can add new entries and search term doesn't exist
                        if (canAddNew && params.term && params.term.length >= 1) {
                            const searchTerm = params.term.toLowerCase();
                            const existingMatch = results.find(r => r.text.toLowerCase() === searchTerm);
                            if (!existingMatch) {
                                results.unshift({
                                    id: `__new__${params.term}`,
                                    text: `➕ Add "${params.term}"`,
                                    isNew: true,
                                    newValue: params.term
                                });
                            }
                        }
                        
                        return {
                            results: results,
                            pagination: { more: false }
                        };
                    },
                    transport: function(params, success, failure) {
                        var $request = $.ajax(params);
                        
                        $request.then(function(data, textStatus, jqXHR) {
                            // Check if we got redirected to login (authentication issue)
                            if (typeof data === 'string' && data.includes('<html>')) {
                                console.error('Authentication required - got HTML response instead of JSON');
                                failure();
                                return;
                            }
                            
                            success(data);
                        });
                        
                        $request.fail(function(jqXHR, textStatus, errorThrown) {
                            console.error('API request failed:', textStatus, errorThrown);
                            if (jqXHR.status === 401 || jqXHR.status === 302) {
                                console.log('Authentication required - please log in');
                            }
                            failure();
                        });
                        
                        return $request;
                    },
                    cache: true
                }
            });
            
            // Handle selection of new items - using the same logic as smart-combobox.js
            $select.on('select2:select', function (e) {
                const data = e.params.data;
                if (data.isNew) {
                    // Use the same createNewEntry function logic as smart-combobox.js
                    createNewControlEntry($select, category, data.newValue);
                } else {
                    // Track usage for existing entries (optional)
                    console.log('Selected existing control:', data.text);
                }
            });
        }
        
        // Create new control entry - based on smart-combobox.js createNewEntry function
        async function createNewControlEntry($select, category, value) {
            try {
                console.log('Creating new control entry:', value);
                
                const response = await fetch('/api/referencedata', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        category: parseInt(category),
                        value: value,
                        description: ''
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    
                    // Clear the select2 and set the new value (same as smart-combobox.js)
                    $select.empty();
                    const newOption = new Option(result.value, result.value, true, true);
                    $select.append(newOption).trigger('change');
                    
                    console.log('New control created successfully:', result);
                    
                    // Show success message
                    showToast('success', `Successfully added "${result.value}"!`);
                } else {
                    const error = await response.json();
                    console.error('Error creating control:', error);
                    $select.val(null).trigger('change');
                    
                    // Show error message
                    showToast('error', error.error || 'Failed to create new control');
                }
            } catch (error) {
                console.error('Error creating new control:', error);
                $select.val(null).trigger('change');
                
                // Show error message
                showToast('error', 'Failed to create new control. Please try again.');
            }
        }
        
        // Simple toast notification function
        function showToast(type, message) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
            
            const alert = $(`
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;" role="alert">
                    <i class="fas ${icon} me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `);
            
            $('body').append(alert);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                alert.alert('close');
            }, 5000);
        }
        
        function removeControl(index) {
            document.getElementById(`control_${index}`).remove();
            updateVulnerability();
        }
        
        // Qualitative control management functions (same as Create view)
        function addQualitativeControl() {
            const container = document.getElementById('qualitativeControlsContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const controlHtml = `
                <div class="control-item card mb-2 border-primary" id="qualitative_control_${qualitativeControlIndex}">
                    <div class="card-body p-3">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ControlName" 
                                        class="form-select control-name-select" 
                                        data-category="5" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}"
                                        data-placeholder="Type to search controls..."
                                        required 
                                        style="width: 100%;">
                                    <option value="">Type to search controls...</option>
                                </select>
                                <input type="hidden" name="QualitativeControls[${qualitativeControlIndex}].Id" value="0" />
                            </div>
                            <div class="col-md-2">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ControlType" class="form-control form-control-sm" required>
                                    <option value="Preventive">Preventive</option>
                                    <option value="Detective">Detective</option>
                                    <option value="Responsive">Responsive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="input-group input-group-sm">
                                    <input type="number" name="QualitativeControls[${qualitativeControlIndex}].ControlEffectiveness" 
                                           class="form-control control-effectiveness" placeholder="%" 
                                           min="0" max="100" step="1" required  />
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ImplementationStatus" 
                                        class="form-control form-control-sm control-status"  required>
                                    <option value="Implemented">Implemented</option>
                                    <option value="Planned">Planned</option>
                                    <option value="NotImplemented">Not Implemented</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <input type="text" name="QualitativeControls[${qualitativeControlIndex}].ControlDescription" 
                                       class="form-control form-control-sm" placeholder="Description" />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeQualitativeControl(${qualitativeControlIndex})" title="Remove Control">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', controlHtml);
            
            // Smart combobox will be initialized by global smart-combobox.js
            // No need to manually initialize here
            
            qualitativeControlIndex++;
            
            // Trigger global initialization for newly added elements
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
        }
        
        function removeQualitativeControl(index) {
            document.getElementById(`qualitative_control_${index}`).remove();
        }
        
        // Setup smart combobox for newly added qualitative control
        function setupNewQualitativeControlCombobox(index) {
            const select = document.querySelector(`select[name="Controls[${index}].ControlName"]`);
            if (!select) return;
            
            const $select = $(select);
            
            // Skip if already initialized
            if ($select.hasClass('select2-hidden-accessible')) {
                return;
            }
            
            const canAddNew = select.dataset.canAddNew === 'true';
            const category = select.dataset.category;
            
            $select.select2({
                placeholder: 'Type to search controls...',
                allowClear: true,
                ajax: {
                    url: '/ReferenceData/Search',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            term: params.term,
                            category: category
                        };
                    },
                    processResults: function (data) {
                        let results = data.map(item => ({
                            id: item.value,
                            text: item.text
                        }));
                        
                        // Add "Add new" option if user can create and there's a search term
                        if (canAddNew && params.term && params.term.length > 0) {
                            results.unshift({
                                id: 'ADD_NEW:' + params.term,
                                text: '+ Add new: "' + params.term + '"',
                                newItem: true
                            });
                        }
                        
                        return { results: results };
                    },
                    cache: true
                },
                templateResult: function(data) {
                    if (data.loading) return data.text;
                    if (data.newItem) {
                        return $('<span style="font-style: italic; color: #007bff;"><i class="fas fa-plus me-1"></i>' + data.text + '</span>');
                    }
                    return data.text;
                }
            });
            
            // Handle selection
            $select.on('select2:select', function (e) {
                const selectedValue = e.params.data.id;
                if (selectedValue.startsWith('ADD_NEW:')) {
                    const newValue = selectedValue.replace('ADD_NEW:', '');
                    
                    // Create new reference data item
                    $.ajax({
                        url: '/ReferenceData/Create',
                        method: 'POST',
                        data: {
                            value: newValue,
                            category: category
                        },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                $select.empty().append(new Option(newValue, newValue, true, true));
                                showAlert('success', 'Control "' + newValue + '" has been added successfully!');
                            } else {
                                showAlert('error', 'Failed to add new control: ' + (response.message || 'Unknown error'));
                                $select.val(null).trigger('change');
                            }
                        },
                        error: function() {
                            showAlert('error', 'Error adding new control. Please try again.');
                            $select.val(null).trigger('change');
                        }
                    });
                }
            });
        }
        
        
        function updateVulnerability() {
            let remainingVulnerability = 1.0;
            
            document.querySelectorAll('.control-item').forEach(item => {
                const effectiveness = parseFloat(item.querySelector('.control-effectiveness').value) || 0;
                const status = item.querySelector('.control-status').value;
                
                if (status === 'Implemented' && effectiveness > 0) {
                    remainingVulnerability *= (1 - effectiveness / 100);
                }
            });
            
            const combinedEffectiveness = (1 - remainingVulnerability) * 100;
            const resultingVulnerability = remainingVulnerability * 100;
            
            document.getElementById('combinedEffectiveness').textContent = combinedEffectiveness.toFixed(2);
            document.getElementById('resultingVulnerability').textContent = resultingVulnerability.toFixed(2);
            document.getElementById('vulnerabilityPreview').textContent = resultingVulnerability.toFixed(2);
            
            updatePreview();
        }
        
        function updatePreview() {
            // Get TEF (most likely)
            const tef = parseFloat(document.querySelector('[name="Assessment.ThreatEventFrequency"]').value) || 0;
            
            // Get vulnerability
            const vulnerability = parseFloat(document.getElementById('resultingVulnerability').textContent) / 100 || 1;
            
            // Calculate LEF
            const lef = tef * vulnerability;
            document.getElementById('lefPreview').textContent = lef.toFixed(3);
            
            // Calculate Primary Loss (most likely values)
            let primaryLoss = 0;
            primaryLoss += parseFloat(document.querySelector('[name="Assessment.ProductivityLossMostLikely"]').value) || 0;
            primaryLoss += parseFloat(document.querySelector('[name="Assessment.ResponseCostsMostLikely"]').value) || 0;
            
            const replacement = parseFloat(document.querySelector('[name="Assessment.ReplacementCostMostLikely"]').value) || 0;
            if (replacement > 1000) primaryLoss += replacement;
            
            const fines = parseFloat(document.querySelector('[name="Assessment.FinesMostLikely"]').value) || 0;
            if (fines > 1000) primaryLoss += fines;
            
            document.getElementById('primaryLossPreview').textContent = primaryLoss.toLocaleString();
            
            // Calculate ALE before insurance
            let ale = lef * primaryLoss;
            
            // Apply insurance deduction if checkbox is checked
            const insuranceCheckbox = document.getElementById('deductInsuranceCheckbox');
            if (insuranceCheckbox && insuranceCheckbox.checked && insuranceAmount > 0) {
                ale = Math.max(0, ale - insuranceAmount);
            }
            
            document.getElementById('alePreview').textContent = ale.toLocaleString();
            
            // Update risk levels for all identified risks
            updateAllRiskLevels();
        }
        
        // Load existing controls based on assessment type
        function loadExistingControls() {
            const assessmentType = document.getElementById('assessmentType').value;
            @if (Model.Controls.Any())
            {
                @foreach (var control in Model.Controls)
                {
                    <text>
                    if (assessmentType === '1') { // FAIR Assessment
                        addExistingControl("@Html.Raw(control.ControlName)", "@control.ControlType", @control.ControlEffectiveness, "@control.ImplementationStatus", "@Html.Raw(control.ControlDescription)", @control.Id);
                    } else { // Qualitative Assessment
                        addExistingQualitativeControl("@Html.Raw(control.ControlName)", "@control.ControlType", @control.ControlEffectiveness, "@control.ImplementationStatus", "@Html.Raw(control.ControlDescription)", @control.Id);
                    }
                    </text>
                }
            }
        }
        
        // Load existing controls for qualitative assessments
        function addExistingQualitativeControl(controlName, controlType, effectiveness, status, description, id) {
            const container = document.getElementById('qualitativeControlsContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const controlHtml = `
                <div class="control-item card mb-2 border-primary" id="qualitative_control_${qualitativeControlIndex}">
                    <div class="card-body p-3">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ControlName" 
                                        class="form-select control-name-select" 
                                        data-category="5" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}"
                                        data-placeholder="Type to search controls..."
                                        required 
                                        style="width: 100%;">
                                    <option value="${controlName}" selected="selected">${controlName}</option>
                                </select>
                                <input type="hidden" name="QualitativeControls[${qualitativeControlIndex}].Id" value="${id}" />
                            </div>
                            <div class="col-md-2">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ControlType" class="form-control form-control-sm" required>
                                    <option value="Preventive" ${controlType === 'Preventive' ? 'selected' : ''}>Preventive</option>
                                    <option value="Detective" ${controlType === 'Detective' ? 'selected' : ''}>Detective</option>
                                    <option value="Responsive" ${controlType === 'Responsive' ? 'selected' : ''}>Responsive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="input-group input-group-sm">
                                    <input type="number" name="QualitativeControls[${qualitativeControlIndex}].ControlEffectiveness" 
                                           class="form-control control-effectiveness" placeholder="%" 
                                           min="0" max="100" step="1" value="${effectiveness}" required  />
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ImplementationStatus" 
                                        class="form-control form-control-sm control-status"  required>
                                    <option value="Implemented" ${status === 'Implemented' ? 'selected' : ''}>Implemented</option>
                                    <option value="Planned" ${status === 'Planned' ? 'selected' : ''}>Planned</option>
                                    <option value="NotImplemented" ${status === 'NotImplemented' ? 'selected' : ''}>Not Implemented</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <input type="text" name="QualitativeControls[${qualitativeControlIndex}].ControlDescription" 
                                       class="form-control form-control-sm" placeholder="Description" value="${description}" />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeQualitativeControl(${qualitativeControlIndex})" title="Remove Control">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', controlHtml);
            
            // Smart combobox will be initialized by global smart-combobox.js
            // Trigger global initialization for existing controls
            if (window.initializeSmartComboboxes) {
                setTimeout(() => window.initializeSmartComboboxes(), 100);
            }
            
            qualitativeControlIndex++; 
        }
        
        function addExistingControl(controlName, controlType, effectiveness, status, description, id) {
            const container = document.getElementById('controlsContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const controlHtml = `
                <div class="control-item card mb-2 border-primary" id="control_${controlIndex}">
                    <div class="card-body p-3">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <select name="Controls[${controlIndex}].ControlName" 
                                        class="form-select control-name-select" 
                                        data-category="5" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}"
                                        data-placeholder="Type to search controls..."
                                        required 
                                        style="width: 100%;">
                                    <option value="${controlName}" selected="selected">${controlName}</option>
                                </select>
                                <input type="hidden" name="Controls[${controlIndex}].Id" value="${id}" />
                            </div>
                            <div class="col-md-2">
                                <select name="Controls[${controlIndex}].ControlType" class="form-control form-control-sm" required>
                                    <option value="Preventive" ${controlType === 'Preventive' ? 'selected' : ''}>Preventive</option>
                                    <option value="Detective" ${controlType === 'Detective' ? 'selected' : ''}>Detective</option>
                                    <option value="Responsive" ${controlType === 'Responsive' ? 'selected' : ''}>Responsive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="input-group input-group-sm">
                                    <input type="number" name="Controls[${controlIndex}].ControlEffectiveness" 
                                           class="form-control control-effectiveness" 
                                           value="${effectiveness}" 
                                           min="0" max="100" step="1" required onchange="updateVulnerability()" />
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <select name="Controls[${controlIndex}].ImplementationStatus" 
                                        class="form-control form-control-sm control-status" onchange="updateVulnerability()" required>
                                    <option value="Implemented" ${status === 'Implemented' ? 'selected' : ''}>Implemented</option>
                                    <option value="Planned" ${status === 'Planned' ? 'selected' : ''}>Planned</option>
                                    <option value="NotImplemented" ${status === 'NotImplemented' ? 'selected' : ''}>Not Implemented</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <input type="text" name="Controls[${controlIndex}].ControlDescription" 
                                       class="form-control form-control-sm" 
                                       value="${description}" placeholder="Description" />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeControl(${controlIndex})" title="Remove Control">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', controlHtml);
            
            // Smart combobox will be initialized by global smart-combobox.js
            // Trigger global initialization for existing controls
            if (window.initializeSmartComboboxes) {
                setTimeout(() => window.initializeSmartComboboxes(), 100);
            }
            
            controlIndex++;
        }
        
        // Risk management functions
        function addRisk() {
            const container = document.getElementById('risksContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const riskHtml = `
                <div class="risk-item card mb-2 border-danger" id="risk_${riskIndex}">
                    <div class="card-body p-2">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <input type="text" name="IdentifiedRisks[${riskIndex}].Title" 
                                       class="form-control form-control-sm" 
                                       placeholder="Risk Title" required />
                            </div>
                            <div class="col-md-3">
                                <textarea name="IdentifiedRisks[${riskIndex}].Description" 
                                          class="form-control form-control-sm" 
                                          rows="2" placeholder="Risk Description"></textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].Owner" 
                                        class="form-select form-select-sm risk-owner-select" 
                                        data-category="2" 
                                        data-can-add-new="${canAddNew}" 
                                        data-placeholder="Select owner..." 
                                        style="width: 100%;">
                                    <option value="">Select...</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <div class="d-flex flex-column align-items-center">
                                    <span id="inherentRiskLevel_${riskIndex}" class="badge bg-secondary mb-1">TBD</span>
                                    <input type="hidden" name="IdentifiedRisks[${riskIndex}].InherentRiskLevel" id="inherentRiskLevelValue_${riskIndex}" value="1" />
                                    <small class="text-muted">Auto-calc</small>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].Treatment" 
                                        class="form-select form-select-sm" 
                                        onchange="updateResidualRisk(${riskIndex})">
                                    <option value="1">Mitigate</option>
                                    <option value="2">Transfer</option>
                                    <option value="3">Accept</option>
                                    <option value="4">Avoid</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <textarea name="IdentifiedRisks[${riskIndex}].TreatmentPlan" 
                                          class="form-control form-control-sm" 
                                          rows="2" 
                                          placeholder="Additional controls needed..."
                                          onchange="updateResidualRisk(${riskIndex})"></textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].ResidualRiskLevel" 
                                        class="form-select form-select-sm" 
                                        id="residualRiskLevel_${riskIndex}">
                                    <option value="1">Low</option>
                                    <option value="2">Medium</option>
                                    <option value="3">High</option>
                                    <option value="4">Critical</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeRisk(${riskIndex})" title="Remove Risk">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', riskHtml);
            
            // Show headers when first risk is added
            if (riskIndex === 0) {
                document.getElementById('riskHeaders').classList.remove('d-none');
            }
            
            // Initialize smart combobox for the newly added risk owner select
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            riskIndex++;
        }
        
        function addExistingRisk(title, description, inherentRiskLevel, id, owner = '', treatment = 1, treatmentPlan = '', residualRiskLevel = 1) {
            const container = document.getElementById('risksContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const riskHtml = `
                <div class="risk-item card mb-2 border-danger" id="risk_${riskIndex}">
                    <div class="card-body p-2">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <input type="text" name="IdentifiedRisks[${riskIndex}].Title" 
                                       class="form-control form-control-sm" 
                                       value="${title}" placeholder="Risk Title" required />
                                <input type="hidden" name="IdentifiedRisks[${riskIndex}].Id" value="${id}" />
                            </div>
                            <div class="col-md-3">
                                <textarea name="IdentifiedRisks[${riskIndex}].Description" 
                                          class="form-control form-control-sm" 
                                          rows="2" placeholder="Risk Description">${description}</textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].Owner" 
                                        class="form-select form-select-sm risk-owner-select" 
                                        data-category="2" 
                                        data-can-add-new="${canAddNew}" 
                                        data-placeholder="Select owner..." 
                                        style="width: 100%;">
                                    <option value="">Select...</option>
                                    ${owner ? `<option value="${owner}" selected="selected">${owner}</option>` : ''}
                                </select>
                            </div>
                            <div class="col-md-1">
                                <div class="d-flex flex-column align-items-center">
                                    <span id="inherentRiskLevel_${riskIndex}" class="badge bg-secondary mb-1">TBD</span>
                                    <input type="hidden" name="IdentifiedRisks[${riskIndex}].InherentRiskLevel" id="inherentRiskLevelValue_${riskIndex}" value="${inherentRiskLevel}" />
                                    <small class="text-muted">Auto-calc</small>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].Treatment" 
                                        class="form-select form-select-sm" 
                                        onchange="updateResidualRisk(${riskIndex})">
                                    <option value="1" ${treatment == 1 ? 'selected' : ''}>Mitigate</option>
                                    <option value="2" ${treatment == 2 ? 'selected' : ''}>Transfer</option>
                                    <option value="3" ${treatment == 3 ? 'selected' : ''}>Accept</option>
                                    <option value="4" ${treatment == 4 ? 'selected' : ''}>Avoid</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <textarea name="IdentifiedRisks[${riskIndex}].TreatmentPlan" 
                                          class="form-control form-control-sm" 
                                          rows="2" 
                                          placeholder="Additional controls needed..."
                                          onchange="updateResidualRisk(${riskIndex})">${treatmentPlan}</textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].ResidualRiskLevel" 
                                        class="form-select form-select-sm" 
                                        id="residualRiskLevel_${riskIndex}" 
                                        data-user-modified="true">
                                    <option value="1" ${residualRiskLevel == 1 ? 'selected' : ''}>Low</option>
                                    <option value="2" ${residualRiskLevel == 2 ? 'selected' : ''}>Medium</option>
                                    <option value="3" ${residualRiskLevel == 3 ? 'selected' : ''}>High</option>
                                    <option value="4" ${residualRiskLevel == 4 ? 'selected' : ''}>Critical</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeRisk(${riskIndex})" title="Remove Risk">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', riskHtml);
            
            // Show headers when first risk is added
            if (riskIndex === 0) {
                document.getElementById('riskHeaders').classList.remove('d-none');
            }
            
            // Initialize smart combobox for the newly added risk owner select
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            riskIndex++;
        }
        
        function removeRisk(index) {
            document.getElementById(`risk_${index}`).remove();
            
            // Hide headers if no risks remain
            const remainingRisks = document.querySelectorAll('.risk-item');
            if (remainingRisks.length === 0) {
                document.getElementById('riskHeaders').classList.add('d-none');
            }
        }
        
        function updateAllRiskLevels() {
            console.log('updateAllRiskLevels called');
            const riskLevel = calculateRiskLevel();
            console.log('Calculated risk level:', riskLevel);
            
            // Update all inherent risk level displays
            const riskItems = document.querySelectorAll('.risk-item');
            console.log('Found risk items:', riskItems.length);
            
            riskItems.forEach((item, index) => {
                const badge = item.querySelector(`[id^="inherentRiskLevel_"]`);
                const hiddenInput = item.querySelector(`[id^="inherentRiskLevelValue_"]`);
                
                console.log(`Risk item ${index}:`, badge, hiddenInput);
                
                if (badge && hiddenInput) {
                    badge.textContent = riskLevel.text;
                    badge.className = `badge ${riskLevel.class} mb-1`;
                    hiddenInput.value = riskLevel.level;
                    console.log(`Updated inherent risk ${index} to:`, riskLevel.text);
                    
                    // Also update residual risk default to same level initially
                    const residualSelect = item.querySelector(`[id^="residualRiskLevel_"]`);
                    if (residualSelect && !residualSelect.hasAttribute('data-user-modified')) {
                        residualSelect.value = riskLevel.level;
                    }
                }
            });
        }
        
        function updateResidualRisk(riskIndex) {
            const treatmentSelect = document.querySelector(`select[name="IdentifiedRisks[${riskIndex}].Treatment"]`);
            const treatmentPlan = document.querySelector(`textarea[name="IdentifiedRisks[${riskIndex}].TreatmentPlan"]`);
            const residualSelect = document.querySelector(`select[name="IdentifiedRisks[${riskIndex}].ResidualRiskLevel"]`);
            const inherentInput = document.querySelector(`input[name="IdentifiedRisks[${riskIndex}].InherentRiskLevel"]`);
            
            if (!treatmentSelect || !residualSelect || !inherentInput) return;
            
            // Mark residual risk as user-modified
            residualSelect.setAttribute('data-user-modified', 'true');
            
            const treatment = parseInt(treatmentSelect.value);
            const inherentLevel = parseInt(inherentInput.value);
            const hasTreatmentPlan = treatmentPlan && treatmentPlan.value.trim().length > 0;
            
            let suggestedResidual = inherentLevel;
            
            // Suggest residual risk reduction based on treatment strategy
            if (treatment === 1 && hasTreatmentPlan) { // Mitigate with controls
                suggestedResidual = Math.max(1, inherentLevel - 1); // Reduce by 1 level
            } else if (treatment === 2) { // Transfer
                suggestedResidual = Math.max(1, inherentLevel - 1); // Reduce by 1 level
            } else if (treatment === 4) { // Avoid
                suggestedResidual = 1; // Low risk if avoided
            }
            // Accept (3) keeps the same level
            
            // Only auto-update if user hasn't manually changed it recently
            const lastChanged = residualSelect.getAttribute('data-last-changed');
            const now = Date.now();
            if (!lastChanged || (now - parseInt(lastChanged)) > 5000) { // 5 second grace period
                residualSelect.value = suggestedResidual;
            }
        }
        
        // Risk level calculation functions
        function calculateRiskLevel() {
            const assessmentType = document.getElementById('assessmentType').value;
            
            if (assessmentType === '1') { // FAIR Assessment
                return calculateFairRiskLevel();
            } else { // Qualitative Assessment
                return calculateQualitativeRiskLevel();
            }
        }
        
        function calculateFairRiskLevel() {
            // Get ALE from preview (remove commas and dollar signs)
            const aleText = document.getElementById('alePreview')?.textContent || '0';
            const ale = parseFloat(aleText.replace(/[$,]/g, '')) || 0;
            
            // These thresholds should match RiskLevelSettings
            // TODO: Fetch these from the API for accuracy
            if (ale >= 1000000) return { level: 4, text: 'Critical', class: 'bg-danger' };
            if (ale >= 100000) return { level: 3, text: 'High', class: 'bg-warning' };
            if (ale >= 10000) return { level: 2, text: 'Medium', class: 'bg-info' };
            return { level: 1, text: 'Low', class: 'bg-success' };
        }
        
        function calculateQualitativeRiskLevel() {
            // Get qualitative risk score from calculation
            const likelihoodElement = document.querySelector('[name="Assessment.QualitativeLikelihood"]');
            const impactElement = document.querySelector('[name="Assessment.QualitativeImpact"]');
            const exposureElement = document.querySelector('[name="Assessment.QualitativeExposure"]');
            
            if (!likelihoodElement?.value || !impactElement?.value || !exposureElement?.value) {
                return { level: 1, text: 'TBD', class: 'bg-secondary' };
            }
            
            const likelihood = parseInt(likelihoodElement.value);
            const impact = parseInt(impactElement.value);
            const exposure = getExposureRating(parseInt(exposureElement.value));
            
            const riskScore = (likelihood * impact) * exposure;
            
            // These thresholds should match RiskLevelSettings
            if (riskScore >= 16) return { level: 4, text: 'Critical', class: 'bg-danger' };
            if (riskScore >= 10) return { level: 3, text: 'High', class: 'bg-warning' };
            if (riskScore >= 4) return { level: 2, text: 'Medium', class: 'bg-info' };
            return { level: 1, text: 'Low', class: 'bg-success' };
        }
        
        function getExposureRating(exposureLevel) {
            // Match the enum values to exposure ratings
            switch(exposureLevel) {
                case 1: return 0.2; // SlightlyExposed
                case 2: return 0.4; // Exposed
                case 3: return 0.8; // ModeratelyExposed
                case 4: return 1.0; // HighlyExposed
                default: return 0.2;
            }
        }
        
        function updateAllRiskLevels() {
            const riskLevel = calculateRiskLevel();
            
            // Update all risk level displays
            document.querySelectorAll('.risk-item').forEach((item, index) => {
                const badge = item.querySelector(`[id^="riskLevel_"]`);
                const hiddenInput = item.querySelector(`[id^="riskLevelValue_"]`);
                
                if (badge && hiddenInput) {
                    badge.textContent = riskLevel.text;
                    badge.className = `badge ${riskLevel.class}`;
                    hiddenInput.value = riskLevel.level;
                }
            });
        }
        
        // Load existing risks
        function loadExistingRisks() {
            @if (Model.Assessment.IdentifiedRisks?.Any() == true)
            {
                @foreach (var risk in Model.Assessment.IdentifiedRisks)
                {
                    <text>
                    addExistingRisk("@Html.Raw(risk.Title)", "@Html.Raw(risk.Description)", @((int)risk.InherentRiskLevel), @risk.Id, "@Html.Raw(risk.Owner)", @((int)risk.Treatment), "@Html.Raw(risk.TreatmentPlan)", @((int)risk.ResidualRiskLevel));
                    </text>
                }
            }
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Load existing controls and risks
            loadExistingControls();
            loadExistingRisks();
            
            // Update risk levels after loading
            setTimeout(() => {
                updateAllRiskLevels();
            }, 100);
            
            // Setup assessment type toggle
            document.getElementById('assessmentType').addEventListener('change', function() {
                const isFair = this.value === '1';
                document.getElementById('fairSection').style.display = isFair ? 'block' : 'none';
                document.getElementById('qualitativeSection').style.display = isFair ? 'none' : 'block';
            });
            
            // Setup secondary loss toggle
            const secondaryCheckbox = document.getElementById('includeSecondaryLoss');
            if (secondaryCheckbox) {
                secondaryCheckbox.addEventListener('change', function() {
                    document.getElementById('secondaryLossSection').style.display = this.checked ? 'block' : 'none';
                });
            }
            
            // Setup insurance deduction toggle
            const insuranceCheckbox = document.getElementById('deductInsuranceCheckbox');
            if (insuranceCheckbox) {
                insuranceCheckbox.addEventListener('change', function() {
                    const insuranceInfo = document.getElementById('insuranceInfo');
                    if (this.checked) {
                        // Fetch and display insurance amount
                        fetchInsuranceAmount();
                        insuranceInfo.style.display = 'block';
                    } else {
                        insuranceInfo.style.display = 'none';
                        // Update preview to remove insurance deduction
                        updatePreview();
                    }
                });
            }
            
            // Update preview on input changes
            document.querySelectorAll('.tef-input, .loss-input').forEach(input => {
                input.addEventListener('input', updatePreview);
            });
            
            // Update risk levels when qualitative fields change
            document.querySelectorAll('[name="Assessment.QualitativeLikelihood"], [name="Assessment.QualitativeImpact"], [name="Assessment.QualitativeExposure"]').forEach(input => {
                input.addEventListener('change', updateAllRiskLevels);
            });
            
            // Initial calculations
            updateVulnerability();
            updatePreview();
            
            // Check if insurance is already checked on page load
            if (document.getElementById('deductInsuranceCheckbox').checked) {
                fetchInsuranceAmount();
                document.getElementById('insuranceInfo').style.display = 'block';
            }
        });
        
        // Fetch insurance amount from settings
        async function fetchInsuranceAmount() {
            try {
                const response = await fetch('/RiskLevelSettings/GetInsuranceAmount');
                if (response.ok) {
                    const data = await response.json();
                    insuranceAmount = data.amount || 0; // Store globally for calculations
                    document.getElementById('insuranceAmountDisplay').textContent = 
                        insuranceAmount > 0 ? `$${insuranceAmount.toLocaleString()}` : '$0 (not configured)';
                    
                    // Update preview to reflect insurance deduction
                    updatePreview();
                } else {
                    document.getElementById('insuranceAmountDisplay').textContent = 'Unable to load';
                    insuranceAmount = 0;
                }
            } catch (error) {
                console.error('Error fetching insurance amount:', error);
                document.getElementById('insuranceAmountDisplay').textContent = 'Error loading amount';
                insuranceAmount = 0;
            }
        }
    </script>
}