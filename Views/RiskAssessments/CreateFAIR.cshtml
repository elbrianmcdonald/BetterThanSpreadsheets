@model CyberRiskApp.ViewModels.FAIRAssessmentViewModel
@{
    ViewData["Title"] = "Create FAIR Risk Assessment";
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-md-11">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-calculator text-success me-2"></i>
                    Create FAIR Risk Assessment
                    <span class="badge bg-success ms-2">Quantitative</span>
                </h2>
                <div>
                    <a asp-action="SelectType" class="btn btn-outline-warning me-2">
                        <i class="fas fa-exchange-alt me-1"></i>Change Type
                    </a>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-1"></i>Back to List
                    </a>
                </div>
            </div>

            <form asp-action="CreateFAIR" method="post" id="fairAssessmentForm" novalidate>
                <div asp-validation-summary="All" class="alert alert-danger"></div>
                
                <!-- Hidden field to set assessment type -->
                <input type="hidden" name="Assessment.AssessmentType" value="1" />
                
                <!-- Basic Information -->
                <div class="card mb-4">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Title" class="form-label fw-bold">Assessment Title <span class="text-danger">*</span></label>
                                    <input asp-for="Assessment.Title" class="form-control" placeholder="Enter assessment title" required />
                                    <span asp-validation-for="Assessment.Title" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Asset" class="form-label fw-bold">Primary Asset <span class="text-danger">*</span></label>
                                    @Html.AssetComboboxFor(m => m.Assessment.Asset, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCUser"), required: true)
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.BusinessUnit" class="form-label fw-bold">Business Unit</label>
                                    @Html.BusinessUnitComboboxFor(m => m.Assessment.BusinessUnit, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCUser"))
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.BusinessOwner" class="form-label fw-bold">Business Owner</label>
                                    @Html.BusinessOwnerComboboxFor(m => m.Assessment.BusinessOwner, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCUser"))
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.CIATriad" class="form-label fw-bold">CIA Triad Impact</label>
                                    <select asp-for="Assessment.CIATriad" class="form-control">
                                        <option value="">Select CIA Impact</option>
                                        <option value="1">Confidentiality</option>
                                        <option value="2">Integrity</option>
                                        <option value="3">Availability</option>
                                        <option value="4">Confidentiality & Integrity</option>
                                        <option value="5">Confidentiality & Availability</option>
                                        <option value="6">Integrity & Availability</option>
                                        <option value="7">All Three (CIA)</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Assessment.ThreatScenario" class="form-label fw-bold">Threat Scenario <span class="text-danger">*</span></label>
                            <textarea asp-for="Assessment.ThreatScenario" class="form-control" rows="3" placeholder="Describe the threat scenario in detail" required></textarea>
                            <span asp-validation-for="Assessment.ThreatScenario" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Assessment.Description" class="form-label fw-bold">Additional Description</label>
                            <textarea asp-for="Assessment.Description" class="form-control" rows="2" placeholder="Optional additional details"></textarea>
                        </div>

                        <!-- Threat Model Selection -->
                        @if (Model.AvailableThreatModels != null && Model.AvailableThreatModels.Any())
                        {
                            <div class="mb-3">
                                <label class="form-label fw-bold">Link Threat Models (Optional)</label>
                                <div class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                                    @foreach (var threatModel in Model.AvailableThreatModels)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   name="SelectedThreatModelIds" 
                                                   value="@threatModel.Id" 
                                                   id="threat_@threatModel.Id"
                                                   @(Model.SelectedThreatModelIds.Contains(threatModel.Id) ? "checked" : "") />
                                            <label class="form-check-label" for="threat_@threatModel.Id">
                                                <strong>@threatModel.Name</strong>
                                                @if (threatModel.Status == CyberRiskApp.Models.ThreatModelStatus.Active)
                                                {
                                                    <span class="badge bg-success ms-2">Active</span>
                                                }
                                                else if (threatModel.Status == CyberRiskApp.Models.ThreatModelStatus.Approved)
                                                {
                                                    <span class="badge bg-primary ms-2">Approved</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning text-dark ms-2">@threatModel.Status</span>
                                                }
                                                <br>
                                                <small class="text-muted">@(threatModel.Description?.Length > 100 ? threatModel.Description.Substring(0, 100) + "..." : threatModel.Description)</small>
                                                @if (threatModel.Attacks.Any())
                                                {
                                                    <br><small class="text-info">@threatModel.Attacks.Count attack scenarios</small>
                                                }
                                            </label>
                                        </div>
                                    }
                                </div>
                                <small class="form-text text-muted">Select threat models to link with this risk assessment. This helps track which attack scenarios are being assessed.</small>
                            </div>
                        }
                    </div>
                </div>

                <!-- Threat Analysis -->
                <div class="card mb-4">
                    <div class="card-header bg-info bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-user-ninja me-2"></i>Threat Analysis
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatCommunity" class="form-label fw-bold">Threat Community</label>
                                    <select asp-for="Assessment.ThreatCommunity" class="form-control">
                                        <option value="">Select Threat Community</option>
                                        <option value="External Actors">External Actors</option>
                                        <option value="Internal Actors">Internal Actors</option>
                                        <option value="Trusted Insiders">Trusted Insiders</option>
                                        <option value="Privileged Insiders">Privileged Insiders</option>
                                        <option value="Partners">Partners</option>
                                        <option value="Suppliers">Suppliers</option>
                                        <option value="Nation States">Nation States</option>
                                        <option value="Organized Crime">Organized Crime</option>
                                        <option value="Hacktivists">Hacktivists</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatAction" class="form-label fw-bold">Threat Action</label>
                                    <select asp-for="Assessment.ThreatAction" class="form-control">
                                        <option value="">Select Threat Action</option>
                                        <option value="Data Exfiltration">Data Exfiltration</option>
                                        <option value="Ransomware">Ransomware</option>
                                        <option value="Business Email Compromise">Business Email Compromise</option>
                                        <option value="Denial of Service">Denial of Service</option>
                                        <option value="Data Manipulation">Data Manipulation</option>
                                        <option value="System Compromise">System Compromise</option>
                                        <option value="Physical Theft">Physical Theft</option>
                                        <option value="Social Engineering">Social Engineering</option>
                                        <option value="Supply Chain Attack">Supply Chain Attack</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Threat Event Frequency Distribution -->
                        <h6 class="text-primary border-bottom pb-2 mb-3">
                            <i class="fas fa-clock me-2"></i>Threat Event Frequency (Annual)
                        </h6>
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequencyMin" class="form-label fw-bold">Minimum</label>
                                    <input asp-for="Assessment.ThreatEventFrequencyMin" type="number" step="0.1" class="form-control tef-input" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequency" class="form-label fw-bold">Most Likely</label>
                                    <input asp-for="Assessment.ThreatEventFrequency" type="number" step="0.1" class="form-control tef-input" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequencyMax" class="form-label fw-bold">Maximum</label>
                                    <input asp-for="Assessment.ThreatEventFrequencyMax" type="number" step="0.1" class="form-control tef-input" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label asp-for="Assessment.ThreatEventFrequencyConfidence" class="form-label fw-bold">Confidence %</label>
                                    <select asp-for="Assessment.ThreatEventFrequencyConfidence" class="form-control">
                                        <option value="90">90%</option>
                                        <option value="95">95%</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Defense in Depth Controls -->
                <div class="card mb-4">
                    <div class="card-header bg-success bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-shield-alt me-2"></i>Defense in Depth - Security Controls
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Add security controls to calculate vulnerability reduction through defense in depth.<br>
                            <strong>Combined effectiveness:</strong> <span id="combinedEffectiveness" class="text-success">0%</span> | 
                            <strong>Resulting vulnerability:</strong> <span id="resultingVulnerability" class="text-warning">100%</span>
                        </div>
                        
                        <div id="controlsContainer" class="mb-3">
                            <!-- Controls will be dynamically added here -->
                        </div>
                        
                        <button type="button" class="btn btn-sm btn-primary mb-4" onclick="addControl()">
                            <i class="fas fa-plus me-1"></i>Add Control
                        </button>
                    </div>
                </div>

                <!-- Primary Loss Magnitude -->
                <div class="card mb-4">
                    <div class="card-header bg-warning bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-dollar-sign me-2"></i>Primary Loss Magnitude Estimates
                        </h5>
                    </div>
                    <div class="card-body">
                        <!-- Productivity Loss -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-chart-line me-2"></i>Productivity Loss
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.ProductivityLossMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.ProductivityLossMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.ProductivityLossMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Response Costs -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-ambulance me-2"></i>Response Costs
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.ResponseCostsMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.ResponseCostsMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.ResponseCostsMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Replacement Cost -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-sync-alt me-2"></i>Replacement Cost
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.ReplacementCostMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.ReplacementCostMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.ReplacementCostMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Fines/Penalties -->
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <i class="fas fa-gavel me-2"></i>Fines/Penalties
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Minimum ($)</label>
                                            <input asp-for="Assessment.FinesMin" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Most Likely ($)</label>
                                            <input asp-for="Assessment.FinesMostLikely" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Maximum ($)</label>
                                            <input asp-for="Assessment.FinesMax" type="number" class="form-control loss-input" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Secondary Loss Toggle -->
                        <div class="form-check mb-3">
                            <input type="checkbox" class="form-check-input" id="includeSecondaryLoss" />
                            <label class="form-check-label fw-bold" for="includeSecondaryLoss">
                                <i class="fas fa-plus-circle me-2"></i>Include Secondary Loss Analysis
                            </label>
                        </div>

                        <!-- Secondary Loss Section (Hidden by default) -->
                        <div id="secondaryLossSection" style="display: none;">
                            <h6 class="text-primary border-bottom pb-2 mb-3">
                                <i class="fas fa-layer-group me-2"></i>Secondary Loss Magnitude Estimates
                            </h6>
                            
                            <!-- Secondary Response Cost -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-ambulance me-2"></i>Secondary Response Cost
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.SecondaryResponseCostMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.SecondaryResponseCostMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.SecondaryResponseCostMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Reputation Damage -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-star me-2"></i>Reputation Damage
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ReputationDamageMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ReputationDamageMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ReputationDamageMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Competitive Advantage Loss -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-trophy me-2"></i>Competitive Advantage Loss
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.CompetitiveAdvantageLossMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.CompetitiveAdvantageLossMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.CompetitiveAdvantageLossMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- External Stakeholder Loss -->
                            <div class="card mb-3">
                                <div class="card-header bg-warning bg-opacity-25">
                                    <i class="fas fa-users me-2"></i>External Stakeholder Loss
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ExternalStakeholderLossMin" type="number" class="form-control" placeholder="Minimum ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ExternalStakeholderLossMostLikely" type="number" class="form-control" placeholder="Most Likely ($)" />
                                        </div>
                                        <div class="col-md-4">
                                            <input asp-for="Assessment.ExternalStakeholderLossMax" type="number" class="form-control" placeholder="Maximum ($)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Simulation Settings -->
                        <h6 class="text-primary border-bottom pb-2 mb-3 mt-4">
                            <i class="fas fa-cogs me-2"></i>Monte Carlo Simulation Settings
                        </h6>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.SimulationIterations" class="form-label fw-bold">Monte Carlo Iterations</label>
                                    <select asp-for="Assessment.SimulationIterations" class="form-control">
                                        <option value="1000">1,000 (Fast)</option>
                                        <option value="10000" selected>10,000 (Standard)</option>
                                        <option value="100000">100,000 (High Precision)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.DistributionType" class="form-label fw-bold">Distribution Type</label>
                                    <select asp-for="Assessment.DistributionType" class="form-control">
                                        <option value="PERT">PERT (Recommended)</option>
                                        <option value="Normal">Normal</option>
                                        <option value="Lognormal">Lognormal</option>
                                        <option value="Uniform">Uniform</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Assessment.LossMagnitudeConfidence" class="form-label fw-bold">Loss Estimate Confidence</label>
                                    <select asp-for="Assessment.LossMagnitudeConfidence" class="form-control">
                                        <option value="90">90%</option>
                                        <option value="95">95%</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Insurance Deduction -->
                        <div class="form-check mb-4">
                            <input asp-for="Assessment.DeductCybersecurityInsurance" type="checkbox" class="form-check-input" id="deductInsuranceCheckbox" />
                            <label asp-for="Assessment.DeductCybersecurityInsurance" class="form-check-label fw-bold">
                                <i class="fas fa-shield-alt me-2"></i>Deduct Cybersecurity Insurance from ALE
                            </label>
                        </div>
                        
                        <!-- Insurance Information (Hidden by default) -->
                        <div id="insuranceInfo" class="alert alert-info mb-4" style="display: none;">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Insurance Deduction:</strong> <span id="insuranceAmountDisplay">Loading...</span> will be deducted from the calculated ALE.
                            <br><small class="text-muted">Insurance amount is configured in Risk Level Settings by administrators.</small>
                        </div>

                        <!-- Real-time Calculation Preview -->
                        <div class="card bg-light border-success">
                            <div class="card-body">
                                <h6 class="text-success mb-3">
                                    <i class="fas fa-calculator me-2"></i>Estimated Results Preview (Single-Point)
                                </h6>
                                <div class="row text-center">
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">Vulnerability</small>
                                            <strong class="text-warning"><span id="vulnerabilityPreview">100</span>%</strong>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">LEF (Annual)</small>
                                            <strong class="text-info"><span id="lefPreview">-</span></strong>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">Primary Loss</small>
                                            <strong class="text-primary">$<span id="primaryLossPreview">-</span></strong>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="p-2 bg-white rounded shadow-sm">
                                            <small class="text-muted d-block">Est. ALE</small>
                                            <strong class="text-success">$<span id="alePreview">-</span></strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Identified Risks Section -->
                <div class="card mb-4">
                    <div class="card-header bg-danger bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-exclamation-triangle me-2"></i>Identified Risks
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Add specific risks identified during this FAIR assessment that need to be tracked and managed.
                        </div>
                        
                        <!-- Column Headers -->
                        <div class="row mb-2 d-none" id="riskHeaders">
                            <div class="col-md-2">
                                <small class="text-muted fw-bold">Risk Title</small>
                            </div>
                            <div class="col-md-3">
                                <small class="text-muted fw-bold">Risk Description</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Owner</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Inherent Risk</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Treatment</small>
                            </div>
                            <div class="col-md-2">
                                <small class="text-muted fw-bold">Additional Controls</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Residual Risk</small>
                            </div>
                            <div class="col-md-1">
                                <small class="text-muted fw-bold">Actions</small>
                            </div>
                        </div>
                        
                        <div id="risksContainer">
                            <!-- Risks will be added here dynamically -->
                        </div>
                        
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="addRisk()">
                            <i class="fas fa-plus me-2"></i>Add Risk
                        </button>
                        <button type="button" class="btn btn-outline-info btn-sm ms-2" onclick="updateAllRiskLevels()">
                            <i class="fas fa-sync me-2"></i>Update Risk Levels
                        </button>
                    </div>
                </div>

                <!-- Related Findings Section -->
                <div class="card mb-4">
                    <div class="card-header bg-warning bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-link me-2"></i>Related Findings
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Link existing findings to this risk assessment. These findings will be associated with the assessment and can be referenced in the identified risks.
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">Select Findings to Link</label>
                            <div id="findingsContainer">
                                <div class="row" id="findingsList">
                                    <!-- Findings will be loaded here -->
                                </div>
                            </div>
                        </div>
                        
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="loadFindings()">
                            <i class="fas fa-search me-2"></i>Load Available Findings
                        </button>
                        
                        <!-- Hidden field to store selected finding IDs -->
                        <input type="hidden" id="selectedFindings" name="LinkedFindingIds" value="" />
                    </div>
                </div>

                <!-- Submit Buttons -->
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fas fa-save me-2"></i>Create FAIR Assessment
                            </button>
                            <a asp-action="Index" class="btn btn-secondary btn-lg">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let controlIndex = 0;
        let riskIndex = 0;
        let insuranceAmount = 0;
        
        // Control management functions
        function addControl() {
            const container = document.getElementById('controlsContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const controlHtml = `
                <div class="control-item card mb-2 border-primary" id="control_${controlIndex}">
                    <div class="card-body p-3">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <select name="Controls[${controlIndex}].ControlName" 
                                        class="form-select control-name-select" 
                                        data-category="5" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}"
                                        data-placeholder="Type to search controls..."
                                        required 
                                        style="width: 100%;">
                                    <option value="">Type to search controls...</option>
                                </select>
                                <input type="hidden" name="Controls[${controlIndex}].Id" value="0" />
                            </div>
                            <div class="col-md-2">
                                <select name="Controls[${controlIndex}].ControlType" class="form-control form-control-sm" required>
                                    <option value="Preventive">Preventive</option>
                                    <option value="Detective">Detective</option>
                                    <option value="Responsive">Responsive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="input-group input-group-sm">
                                    <input type="number" name="Controls[${controlIndex}].ControlEffectiveness" 
                                           class="form-control control-effectiveness" placeholder="%" 
                                           min="0" max="100" step="1" required onchange="updateVulnerability()" />
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <select name="Controls[${controlIndex}].ImplementationStatus" 
                                        class="form-control form-control-sm control-status" onchange="updateVulnerability()" required>
                                    <option value="Implemented">Implemented</option>
                                    <option value="Planned">Planned</option>
                                    <option value="NotImplemented">Not Implemented</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <input type="text" name="Controls[${controlIndex}].ControlDescription" 
                                       class="form-control form-control-sm" placeholder="Description" />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeControl(${controlIndex})" title="Remove Control">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', controlHtml);
            
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            controlIndex++;
            updateVulnerability();
        }
        
        function removeControl(index) {
            document.getElementById(`control_${index}`).remove();
            updateVulnerability();
        }
        
        // Risk management functions
        function addRisk() {
            const container = document.getElementById('risksContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCUser"))' === 'True';
            const riskHtml = `
                <div class="risk-item card mb-2 border-danger" id="risk_${riskIndex}">
                    <div class="card-body p-2">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <input type="text" name="IdentifiedRisks[${riskIndex}].Title" 
                                       class="form-control form-control-sm" 
                                       placeholder="Risk Title" />
                            </div>
                            <div class="col-md-3">
                                <textarea name="IdentifiedRisks[${riskIndex}].Description" 
                                          class="form-control form-control-sm" 
                                          rows="2" placeholder="Risk Description"></textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].Owner" 
                                        class="form-select form-select-sm risk-owner-select" 
                                        data-category="2" 
                                        data-can-add-new="${canAddNew}" 
                                        data-placeholder="Select owner..." 
                                        style="width: 100%;">
                                    <option value="">Select...</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <div class="d-flex flex-column align-items-center">
                                    <span id="inherentRiskLevel_${riskIndex}" class="badge bg-secondary mb-1">TBD</span>
                                    <input type="hidden" name="IdentifiedRisks[${riskIndex}].InherentRiskLevel" id="inherentRiskLevelValue_${riskIndex}" value="1" />
                                    <small class="text-muted">Auto-calc</small>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].Treatment" 
                                        class="form-select form-select-sm" 
                                        onchange="updateResidualRisk(${riskIndex})">
                                    <option value="1">Mitigate</option>
                                    <option value="2">Transfer</option>
                                    <option value="3">Accept</option>
                                    <option value="4">Avoid</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <textarea name="IdentifiedRisks[${riskIndex}].TreatmentPlan" 
                                          class="form-control form-control-sm" 
                                          rows="2" 
                                          placeholder="Additional controls needed..."
                                          onchange="updateResidualRisk(${riskIndex})"></textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].ResidualRiskLevel" 
                                        class="form-select form-select-sm" 
                                        id="residualRiskLevel_${riskIndex}">
                                    <option value="1">Low</option>
                                    <option value="2">Medium</option>
                                    <option value="3">High</option>
                                    <option value="4">Critical</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeRisk(${riskIndex})" title="Remove Risk">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', riskHtml);
            
            if (riskIndex === 0) {
                document.getElementById('riskHeaders').classList.remove('d-none');
            }
            
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            riskIndex++;
            
            setTimeout(() => {
                updateAllRiskLevels();
            }, 100);
        }
        
        function removeRisk(index) {
            document.getElementById(`risk_${index}`).remove();
            
            const remainingRisks = document.querySelectorAll('.risk-item');
            if (remainingRisks.length === 0) {
                document.getElementById('riskHeaders').classList.add('d-none');
            }
        }
        
        // Risk level calculation functions
        function calculateFairRiskLevel() {
            const aleText = document.getElementById('alePreview')?.textContent || '0';
            const ale = parseFloat(aleText.replace(/[$,]/g, '')) || 0;
            
            if (ale >= 1000000) return { level: 4, text: 'Critical', class: 'bg-danger' };
            if (ale >= 100000) return { level: 3, text: 'High', class: 'bg-warning' };
            if (ale >= 10000) return { level: 2, text: 'Medium', class: 'bg-info' };
            return { level: 1, text: 'Low', class: 'bg-success' };
        }
        
        function updateAllRiskLevels() {
            const riskLevel = calculateFairRiskLevel();
            
            const riskItems = document.querySelectorAll('.risk-item');
            riskItems.forEach((item, index) => {
                const badge = item.querySelector(`[id^="inherentRiskLevel_"]`);
                const hiddenInput = item.querySelector(`[id^="inherentRiskLevelValue_"]`);
                
                if (badge && hiddenInput) {
                    badge.textContent = riskLevel.text;
                    badge.className = `badge ${riskLevel.class} mb-1`;
                    hiddenInput.value = riskLevel.level;
                    
                    const residualSelect = item.querySelector(`[id^="residualRiskLevel_"]`);
                    if (residualSelect && !residualSelect.hasAttribute('data-user-modified')) {
                        residualSelect.value = riskLevel.level;
                    }
                }
            });
        }
        
        function updateResidualRisk(riskIndex) {
            const treatmentSelect = document.querySelector(`select[name="IdentifiedRisks[${riskIndex}].Treatment"]`);
            const treatmentPlan = document.querySelector(`textarea[name="IdentifiedRisks[${riskIndex}].TreatmentPlan"]`);
            const residualSelect = document.querySelector(`select[name="IdentifiedRisks[${riskIndex}].ResidualRiskLevel"]`);
            const inherentInput = document.querySelector(`input[name="IdentifiedRisks[${riskIndex}].InherentRiskLevel"]`);
            
            if (!treatmentSelect || !residualSelect || !inherentInput) return;
            
            residualSelect.setAttribute('data-user-modified', 'true');
            
            const treatment = parseInt(treatmentSelect.value);
            const inherentLevel = parseInt(inherentInput.value);
            const hasTreatmentPlan = treatmentPlan && treatmentPlan.value.trim().length > 0;
            
            let suggestedResidual = inherentLevel;
            
            if (treatment === 1 && hasTreatmentPlan) {
                suggestedResidual = Math.max(1, inherentLevel - 1);
            } else if (treatment === 2) {
                suggestedResidual = Math.max(1, inherentLevel - 1);
            } else if (treatment === 4) {
                suggestedResidual = 1;
            }
            
            const lastChanged = residualSelect.getAttribute('data-last-changed');
            const now = Date.now();
            if (!lastChanged || (now - parseInt(lastChanged)) > 5000) {
                residualSelect.value = suggestedResidual;
            }
        }
        
        function updateVulnerability() {
            let remainingVulnerability = 1.0;
            
            document.querySelectorAll('.control-item').forEach(item => {
                const effectiveness = parseFloat(item.querySelector('.control-effectiveness').value) || 0;
                const status = item.querySelector('.control-status').value;
                
                if (status === 'Implemented' && effectiveness > 0) {
                    remainingVulnerability *= (1 - effectiveness / 100);
                }
            });
            
            const combinedEffectiveness = (1 - remainingVulnerability) * 100;
            const resultingVulnerability = remainingVulnerability * 100;
            
            document.getElementById('combinedEffectiveness').textContent = combinedEffectiveness.toFixed(2);
            document.getElementById('resultingVulnerability').textContent = resultingVulnerability.toFixed(2);
            document.getElementById('vulnerabilityPreview').textContent = resultingVulnerability.toFixed(2);
            
            updatePreview();
        }
        
        function updatePreview() {
            const tef = parseFloat(document.querySelector('[name="Assessment.ThreatEventFrequency"]').value) || 0;
            const vulnerability = parseFloat(document.getElementById('resultingVulnerability').textContent) / 100 || 1;
            const lef = tef * vulnerability;
            
            document.getElementById('lefPreview').textContent = lef.toFixed(3);
            
            let primaryLoss = 0;
            primaryLoss += parseFloat(document.querySelector('[name="Assessment.ProductivityLossMostLikely"]').value) || 0;
            primaryLoss += parseFloat(document.querySelector('[name="Assessment.ResponseCostsMostLikely"]').value) || 0;
            
            const replacement = parseFloat(document.querySelector('[name="Assessment.ReplacementCostMostLikely"]').value) || 0;
            if (replacement > 1000) primaryLoss += replacement;
            
            const fines = parseFloat(document.querySelector('[name="Assessment.FinesMostLikely"]').value) || 0;
            if (fines > 1000) primaryLoss += fines;
            
            document.getElementById('primaryLossPreview').textContent = primaryLoss.toLocaleString();
            
            let ale = lef * primaryLoss;
            
            const insuranceCheckbox = document.getElementById('deductInsuranceCheckbox');
            if (insuranceCheckbox && insuranceCheckbox.checked && insuranceAmount > 0) {
                ale = Math.max(0, ale - insuranceAmount);
            }
            
            document.getElementById('alePreview').textContent = ale.toLocaleString();
            updateAllRiskLevels();
        }
        
        async function fetchInsuranceAmount() {
            try {
                const response = await fetch('/RiskLevelSettings/GetInsuranceAmount');
                if (response.ok) {
                    const data = await response.json();
                    insuranceAmount = data.amount || 0;
                    document.getElementById('insuranceAmountDisplay').textContent = 
                        insuranceAmount > 0 ? `$${insuranceAmount.toLocaleString()}` : '$0 (not configured)';
                    updatePreview();
                } else {
                    document.getElementById('insuranceAmountDisplay').textContent = 'Unable to load';
                    insuranceAmount = 0;
                }
            } catch (error) {
                console.error('Error fetching insurance amount:', error);
                document.getElementById('insuranceAmountDisplay').textContent = 'Error loading amount';
                insuranceAmount = 0;
            }
        }
        
        // Findings linking functions
        let selectedFindingIds = [];
        
        async function loadFindings() {
            try {
                const response = await fetch('/api/findings/open');
                if (response.ok) {
                    const findings = await response.json();
                    displayFindings(findings);
                } else {
                    console.error('Failed to load findings');
                }
            } catch (error) {
                console.error('Error loading findings:', error);
            }
        }
        
        function displayFindings(findings) {
            const container = document.getElementById('findingsList');
            container.innerHTML = '';
            
            if (findings.length === 0) {
                container.innerHTML = '<div class="col-12"><p class="text-muted">No open findings available to link.</p></div>';
                return;
            }
            
            findings.forEach(finding => {
                const findingCard = `
                    <div class="col-md-6 mb-2">
                        <div class="card border-primary finding-card" style="cursor: pointer;" data-finding-id="${finding.id}">
                            <div class="card-body p-2">
                                <div class="form-check">
                                    <input class="form-check-input finding-checkbox" type="checkbox" value="${finding.id}" id="finding_${finding.id}">
                                    <label class="form-check-label" for="finding_${finding.id}">
                                        <strong>${finding.title}</strong><br>
                                        <small class="text-muted">${finding.findingNumber} - ${finding.domain}</small><br>
                                        <span class="badge bg-${getRiskBadgeClass(finding.riskRating)}">${finding.riskRating}</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', findingCard);
            });
            
            // Add event listeners to checkboxes
            document.querySelectorAll('.finding-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectedFindings);
            });
            
            // Add click handlers to cards
            document.querySelectorAll('.finding-card').forEach(card => {
                card.addEventListener('click', function(e) {
                    if (e.target.type !== 'checkbox') {
                        const checkbox = this.querySelector('.finding-checkbox');
                        checkbox.checked = !checkbox.checked;
                        updateSelectedFindings();
                    }
                });
            });
        }
        
        function getRiskBadgeClass(riskLevel) {
            switch (riskLevel?.toLowerCase()) {
                case 'critical': return 'danger';
                case 'high': return 'warning';
                case 'medium': return 'info';
                case 'low': return 'success';
                default: return 'secondary';
            }
        }
        
        function updateSelectedFindings() {
            selectedFindingIds = [];
            document.querySelectorAll('.finding-checkbox:checked').forEach(checkbox => {
                selectedFindingIds.push(parseInt(checkbox.value));
            });
            document.getElementById('selectedFindings').value = selectedFindingIds.join(',');
            console.log('Selected findings:', selectedFindingIds);
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Add initial control
            addControl();
            
            // Setup secondary loss toggle
            document.getElementById('includeSecondaryLoss').addEventListener('change', function() {
                document.getElementById('secondaryLossSection').style.display = this.checked ? 'block' : 'none';
            });
            
            // Setup insurance deduction toggle
            document.getElementById('deductInsuranceCheckbox').addEventListener('change', function() {
                const insuranceInfo = document.getElementById('insuranceInfo');
                if (this.checked) {
                    fetchInsuranceAmount();
                    insuranceInfo.style.display = 'block';
                } else {
                    insuranceInfo.style.display = 'none';
                    updatePreview();
                }
            });
            
            // Update preview on input changes
            document.querySelectorAll('.tef-input, .loss-input').forEach(input => {
                input.addEventListener('input', updatePreview);
            });
            
            // Initial calculations
            updateVulnerability();
            updatePreview();
            
            if (document.getElementById('deductInsuranceCheckbox').checked) {
                fetchInsuranceAmount();
                document.getElementById('insuranceInfo').style.display = 'block';
            }
            
            // Handle form submission
            document.getElementById('fairAssessmentForm').addEventListener('submit', function(e) {
                // Update selected findings before submission
                updateSelectedFindings();
                
                // Remove any empty identified risks to prevent validation errors
                const emptyRisks = document.querySelectorAll('.risk-item');
                emptyRisks.forEach(riskItem => {
                    const titleInput = riskItem.querySelector('input[name*="IdentifiedRisks"][name*="Title"]');
                    if (!titleInput || !titleInput.value.trim()) {
                        riskItem.remove();
                    }
                });
                
                // Basic validation
                const requiredFields = ['Assessment.Title', 'Assessment.Asset', 'Assessment.ThreatScenario'];
                let isValid = true;
                
                requiredFields.forEach(fieldName => {
                    const field = document.querySelector(`[name="${fieldName}"]`);
                    if (!field || !field.value.trim()) {
                        isValid = false;
                        field?.classList.add('is-invalid');
                    } else {
                        field?.classList.remove('is-invalid');
                    }
                });
                
                if (!isValid) {
                    e.preventDefault();
                    alert('Please fill in all required fields: Title, Asset, and Threat Scenario');
                    return false;
                }
                
                return true;
            });
        });
    </script>
}