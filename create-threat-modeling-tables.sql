-- Create threat modeling tables manually
-- Only create tables if they don't exist

BEGIN;

-- Create ThreatModels table
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'ThreatModels') THEN
        CREATE TABLE "ThreatModels" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Name" character varying(200) NOT NULL,
            "Description" text NOT NULL,
            "Asset" character varying(100) NOT NULL,
            "BusinessUnit" character varying(100) NOT NULL,
            "AssetOwner" character varying(100) NOT NULL,
            "AssetValue" numeric(18,2),
            "Status" integer NOT NULL,
            "CreatedBy" character varying(100) NOT NULL,
            "ApprovedBy" character varying(100),
            "CreatedAt" timestamp with time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
            "UpdatedAt" timestamp with time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
            "ApprovedAt" timestamp with time zone,
            "NextReviewDate" timestamp with time zone,
            "ReviewNotes" text,
            "RiskAssessmentId" integer,
            CONSTRAINT "PK_ThreatModels" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_ThreatModels_RiskAssessments_RiskAssessmentId" FOREIGN KEY ("RiskAssessmentId") REFERENCES "RiskAssessments" ("Id") ON DELETE SET NULL
        );
        
        CREATE INDEX "IX_ThreatModels_RiskAssessmentId" ON "ThreatModels" ("RiskAssessmentId");
        
        RAISE NOTICE 'Created ThreatModels table';
    ELSE
        RAISE NOTICE 'ThreatModels table already exists';
    END IF;
END $$;

-- Create Attacks table
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Attacks') THEN
        CREATE TABLE "Attacks" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Name" character varying(200) NOT NULL,
            "Description" text NOT NULL,
            "KillChainPhase" integer NOT NULL,
            "AttackVector" integer NOT NULL,
            "AttackComplexity" integer NOT NULL,
            "ThreatActorType" integer NOT NULL,
            "Prerequisites" text,
            "AttackSteps" text NOT NULL,
            "ToolsAndTechniques" text,
            "IndicatorsOfCompromise" text,
            "Impact" integer NOT NULL,
            "Likelihood" integer NOT NULL,
            "RiskLevel" integer NOT NULL,
            "ExistingControls" text,
            "RecommendedMitigations" text,
            "MitreAttackTechnique" character varying(50),
            "MitreAttackTactic" character varying(100),
            "DetectionDifficulty" integer NOT NULL,
            "ResidualRisk" integer NOT NULL,
            "TreatmentStrategy" integer NOT NULL,
            "Notes" text,
            "CreatedAt" timestamp with time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
            "UpdatedAt" timestamp with time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
            "ThreatModelId" integer NOT NULL,
            "FindingId" integer,
            "RiskId" integer,
            CONSTRAINT "PK_Attacks" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_Attacks_Findings_FindingId" FOREIGN KEY ("FindingId") REFERENCES "Findings" ("Id") ON DELETE SET NULL,
            CONSTRAINT "FK_Attacks_Risks_RiskId" FOREIGN KEY ("RiskId") REFERENCES "Risks" ("Id") ON DELETE SET NULL,
            CONSTRAINT "FK_Attacks_ThreatModels_ThreatModelId" FOREIGN KEY ("ThreatModelId") REFERENCES "ThreatModels" ("Id") ON DELETE CASCADE
        );
        
        CREATE INDEX "IX_Attacks_FindingId" ON "Attacks" ("FindingId");
        CREATE INDEX "IX_Attacks_RiskId" ON "Attacks" ("RiskId");
        CREATE INDEX "IX_Attacks_ThreatModelId" ON "Attacks" ("ThreatModelId");
        
        RAISE NOTICE 'Created Attacks table';
    ELSE
        RAISE NOTICE 'Attacks table already exists';
    END IF;
END $$;

-- Add LinkedRiskAssessmentId column to RiskAcceptanceRequests if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'RiskAcceptanceRequests' AND column_name = 'LinkedRiskAssessmentId') THEN
        ALTER TABLE "RiskAcceptanceRequests" ADD "LinkedRiskAssessmentId" integer;
        CREATE INDEX "IX_RiskAcceptanceRequests_LinkedRiskAssessmentId" ON "RiskAcceptanceRequests" ("LinkedRiskAssessmentId");
        ALTER TABLE "RiskAcceptanceRequests" ADD CONSTRAINT "FK_RiskAcceptanceRequests_RiskAssessments_LinkedRiskAssessment~" FOREIGN KEY ("LinkedRiskAssessmentId") REFERENCES "RiskAssessments" ("Id");
        
        RAISE NOTICE 'Added LinkedRiskAssessmentId column to RiskAcceptanceRequests';
    ELSE
        RAISE NOTICE 'LinkedRiskAssessmentId column already exists in RiskAcceptanceRequests';
    END IF;
END $$;

-- Mark the migration as applied
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250731005634_AddThreatModeling') THEN
        INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
        VALUES ('20250731005634_AddThreatModeling', '8.0.18');
        
        RAISE NOTICE 'Marked AddThreatModeling migration as applied';
    ELSE
        RAISE NOTICE 'AddThreatModeling migration already marked as applied';
    END IF;
END $$;

COMMIT;

RAISE NOTICE 'Threat modeling schema update completed successfully!';